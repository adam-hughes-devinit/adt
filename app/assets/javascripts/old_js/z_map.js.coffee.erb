




$('.vis_input').change(() -> 
  if @active_params = gather_inputs()
    make_map_with_params(@active_params)
  )

gather_inputs = () ->
    oda_likes = []
    $('#oda_like_input option:selected').each((d) ->
      t = $(this).text(); 
      if (t.indexOf('All') != 0) 
        oda_likes.push(t)
    )
    verifieds = []
    $('#verified_input option:selected').each((d) ->
      t = $(this).text(); 
      if (t.indexOf('All')!=0) 
        verifieds.push(t)
    )
    sectors = []
    $('#sector_input option:selected').each((d) ->
      t = $(this).text(); 
      if (t.indexOf('All')!=0) 
        sectors.push(t)
    )
    flow_types = []
    $('#flow_type_input option:selected').each((d) -> 
      t = $(this).text(); 
      if t.indexOf('All')!=0
        flow_types.push(t)
    )
    active_years = [] # years was already taken
    $('#year_input option:selected').each((d) -> 
      t = $(this).text(); 
      if (t.indexOf('All')!=0) 
        active_years.push(t)
    )


    input_params = {}

    if oda_likes.length > 0 
      input_params.flow_class = oda_likes
    if verifieds.length > 0 
      input_params.verified = verifieds
    if sectors.length > 0 
      input_params.sector_name = sectors
    if flow_types.length > 0 
      input_params.flow_type = flow_types 
    if (active_years?.length > 0) 
      input_params.year = active_years
      @years = active_years

    console.log(input_params)
    delete @active_params.recipient_iso2
    delete @active_params.get
    if input_params != @active_params 
      input_params
    else 
      null


# Preparing the map
w = 800
h = w*(1)
xy = d3.geo.mercator().scale(w*4.5).translate([.125*w,.375*h])
path = d3.geo.path().projection(xy)
c = d3.scale.linear().domain([0,8000000000,150000000000]).range(['#FAEDD9', '#808F12', '#2A5C0B'])
logscale = d3.scale.log().domain([1,c.domain()[2]])
greyscalec = d3.scale.linear().domain([3,4]).range(['#000000','#FFFFFF'])
# c_sector= d3.scale.category20c(), # Replaced with a custom mapping function (ERB) below
money = d3.format("0,r")
@years = d3.range(2000,2012)
total_cdf_in_view = 0
@active_params = {}
bigger_font_size = d3.max([(14/800)*w,13])
medium_font_size = d3.max([(12/800)*w,12])
smaller_font_size = d3.max([(10/800)*w,10])
label_green = d3.rgb("#819014") # This is green for the overlay label

    
c_sector = (sector_name) ->
	sector_color_map = {
		<%= Sector.all.map{ |s| "'#{s.name}' : '#{s.color || '#444' }'" }.join(", ").html_safe %>
		, 'Unset' : '#ccc'
	}
	sector_color_map[sector_name]
	



# Some formatting functions
nicemoney = (amount) ->
  if 100 > amount 
    money(d3.round(amount,0))
  else if 1000000 > amount >= 1000
    d3.round((amount/1000),0)+"K"
  else if 1000000000 > amount >= 1000000
    d3.round((amount/1000000),1)+"M"
  else if amount >= 1000000000
    money(d3.round((amount/1000000000),2))+"B"

nicemoneyaxis = (amount) ->
  if 100 > amount 
    amount.toFixed(1)
  else if 1000000 > amount >= 1000
    (amount/1000).toFixed(1)+"K"
  else if 1000000000 > amount >= 1000000
    (amount/1000000).toFixed(1)+"M"
  else if amount >= 1000000000
    (amount/1000000000).toFixed(1)+"B"


pie = d3.layout.pie()
   .value((d) -> d.value );

vis = d3.select("#vis")
  .append("svg:svg")
    .attr("id", "africa-map")
    .attr("width", w)
    .attr("height", h)    
    ;

# Trying out filter for the overlay
filter = vis.append("svg:defs")
  .append("svg:filter")
    .attr("id", "blur")
  .append("svg:feGaussianBlur")
    .attr("stdDeviation", 5);

# Make the map -- but know that the data is changing
map = vis.append("svg:g")
    .attr("id", "states")
  .attr("transform","translate(100,"+ w/7 + ")")
  ;
# ocean_outline_d, collection, and other_features are defined elsewhere
ocean_outline = map.append("svg:path")
      .attr("id", "ocean_outline")
      .attr("d", @ocean_outline_d)
      .attr("stroke-width", 10)
      .attr("stroke", "darkblue")
      .style('fill', 'transparent')
      .attr('transform', 'scale('+(h/800)+') translate(-130, -'+((1.255/8)*h)+')')
      .attr('filter', "url(#blur)")

# console.log('other_features', @other_features)
@other_features.forEach((feature) -> 
  #console.log('f', feature)
  feature.properties.id = "non_african"
  @collection.features.unshift(feature)
)


countries =  d3.select("#states")
    .selectAll(".country")
      .data(@collection.features)
  .enter().append("svg:path")
      .attr("class", (d) ->  
        if d.properties.id == "non_african" 
         "non_african" 
        else "fuzz country")
      .attr("id", (d, i) ->  
        if d.properties.id == "non_african" 
          ""
        else
          d.properties.id)
      .attr("name", (d) ->  d.properties.name)
      .attr("d", path)
      .attr("stroke-width", 1)
      .attr("stroke", "#333")
      .attr("fill", "#777")
      .attr("filter", "url(#blur)")

      ;

border_line_array = [
  [0,0,0,h], [0,h,w,h], [w,h,w,0], [w,0,0,0]
]
frame = vis.append('svg:g')
      .attr('id', 'border_lines')
      .selectAll('.border_line')
      .data(border_line_array)
  .enter().append('svg:line')
    .attr('class', 'border_line')
    .attr('x1',(d) -> d[0])
    .attr('y1',(d) -> d[1])
    .attr('x2',(d) -> d[2])
    .attr('y2',(d) -> d[3])
    .attr('stroke', '#eee')
    .attr('stroke-width', 8)

@map_data = d3.nest()
  .key((d) -> d.properties.id)
  .rollup((d) -> "value" : null, "value_current": null)
  .entries(collection.features)

map_data_item = (iso2) ->
  item = @map_data.filter((m) -> m.key == iso2)[0]
  item ? null



@make_map_with_params = (params) ->
  # 1. Fuzz over the map and remove listeners.
  fuzz()
  d3.selectAll('.country')
          .on("click", '')
          .on("mouseover", '')
          .on("mouseout", '')
          .style('cursor', '')

  # 2. Get country sums by params
  post_params = params || {}
  post_params.get = "recipient_iso2"
  post_params.multiple_recipients = "percent_then_merge"
  post_params.get = "recipient_iso2"
  console.log('sending request for ', post_params)
  $


make_data_from_json = (json_response) ->
  console.log("make data from json, this is ", this)
  start = new Date
  item_delay = 20
  item_duration = 300
  console.log("making a map from", json_response)
  @map_data.forEach((d,i) -> # Iterate over your new data and update @map_data with it
      if (n = json_response.filter((j)->j.recipient_iso2 == d.key)[0]) 
        d.values.value = n.usd_2009
        d.values.value_current = n.usd_current
      else
        d.values.value = null
        d.values.value_current = null) 
  c.domain([0, # Then update your color scale to go with your new @map_data
    ((d3.max(@map_data, (m) -> Number(m.values.value)))/4),
    (d3.max(@map_data, (m) -> Number(m.values.value))*1.1)
    ]);
  logscale.domain([1,c.domain()[2]]); 
# Then iterate over @map_data again to color with your new scale.
# (How to only iterate once? Maybe you could update the colorscale from "json" directly
  @map_data.forEach((d,i) ->
    country = d3.select("#"+d.key)
    #console.log("coloring " , d, " --> ", country)
    if d.values.value == null 
      color = '#777' 
    else 
      color =  c(d.values.value)
    country.transition()
        .duration(item_duration)
        .delay(i*item_delay)
        .attr('fill', color)
  )
  total_cdf_in_view = d3.sum(@map_data,(m) -> m.values.value )
  # 5. unfuzz and re-add listeners
  unfuzz((item_delay*@map_data.length)+item_duration,item_duration)
  return null


time_since = (time) -> new Date - time


#                     ___....--- Click   #    #    #    # 
# ***---______...--***                  #    #    #    #

click = () ->
  # get the country info
  window.active_iso = this.id
  window.active_name = $(this).attr("name")
  # these are all the records for the active country:
  window.active_country_data = []
  if d3.select(this).attr('fill')!='#777'
    fuzz()
  # prep a g for the overlay
  overlay = vis.append('svg:g')
      .attr('id', 'overlay-wrapper')
      .attr('class', 'overlay')
  # drop down the gray sheet
  overlay.append('svg:rect')
    .attr("id", "grayBox")
    .attr('class', 'overlay')
    .attr("height", h)
    .attr("width", w)
    .attr("fill", "#000")
    .attr("opacity", 0)
    .on("click", removeOverlay)
  .transition()
    .duration(600)
    .attr("opacity", .6)  

  active_params.get = 'sector_name,year'
  active_params.recipient_iso2 = window.active_iso
  console.log("click, get ", active_params)
  $.post("/aggregates/projects", active_params, (json) -> 

    delete active_params.recipient_iso2
    window.active_country_data = json  
    if active_country_data.length == 0
      removeOverlay()
    else 
      console.log("active_iso", active_iso)
      console.log("active_name", active_name)
      try_drawing_overlay(active_country_data)
      return
  , 'json')
    


# You could probably clean this up, but here we go anyways.
try_drawing_overlay = () -> 
  @active_country_data = window.active_country_data
  # Really quick -- if the user has only selected one year,force the previous year into years also
  if @years.length is 1
    @years = [(@years[0]-1), @years[0], (Number(@years[0])+1)]
  
  # build year/sector data (for stack):
  # this is going to hold one array for each sector that is present
  stackLayers = []
  # get all the present sectors
  console.log("active_country_data", @active_country_data)
  sectors = @active_country_data.map((d) -> d.sector_name).getUnique()
    # you have to have an entry for each year -- arrays have to be same length
  sectors.forEach((sector) ->
    sectorLayer = []
      # years is defined at the top -- range 2000 to 201x
    @years.forEach((year) -> 
      pointData = @active_country_data.filter((d) -> d.year == year && d.sector_name == sector )
      point = {x: year, y: d3.sum(pointData, (d)-> d.usd_2009)}
      sectorLayer.push(point)
      )
    stackLayers.push(sectorLayer)
  )

  yearSectorStack = d3.layout.stack()(stackLayers)

 # build sum data (for labels):
  sectorSums = d3.nest() 
    .key((d) -> d.sector_name)
    .rollup((data) ->{ "value" : d3.sum(data,(d) -> d.usd_2009), "count" : d3.sum(data, (d) ->d.count) } )
    .entries(@active_country_data)

 # build percent of total cdf data (for pie):
  percent_of_total = Math.round(((@map_data.filter((d) -> d.key == @active_iso ))[0].values.value/total_cdf_in_view)*1000)/10

  # use the data to build scales
  annual_amounts = []
  yearSectorStack[0].forEach((d,i) ->
    annual_amount = 0
    yearSectorStack.forEach((e) ->
      annual_amount += e[i].y
    )
    annual_amounts.push(annual_amount)
  )

  # in $5mil increments, and if less than $1mil, $1mil is the max
  annual_maximum = Math.max(Math.round(d3.max(annual_amounts)/5000000)*5000000, 10000000)

  sector_area_h = .4*w
  sector_area_w = .4*w
  sector_area_y = d3.scale.pow().domain([0,annual_maximum]).range([sector_area_h, 0])
  sector_area_x = d3.scale.linear().domain([d3.min(@years), d3.max(@years)]).range([0,sector_area_w])

  sector_area = d3.svg.area()
    .x((d,i) -> sector_area_x(d.x))
    .y0((d) ->  sector_area_y(d.y0))
    .y1((d) ->  sector_area_y(d.y + d.y0))
    .interpolate('monotone')

  null_area = d3.svg.area()
    .x((d) ->  sector_area_x(d.x))
    .y0(sector_area_h)
    .y1(sector_area_h)
    .interpolate('monotone')
  # paint the header and labels
    # paint the header
    # 
    # I really want this to resize according to country name. But I can't figure out how to do that.
  overlay = d3.select('.overlay')
  country_header = overlay.append('svg:g')
   	.attr("id", "country_header")
   	.append("svg:foreignObject")
      .attr("x", 100)
      .attr("y", 20)
      .attr("height", h/6)
      .attr("width", w/2.1)  
      .append('xhtml:body')
		    .attr("height", h/6)
	      .attr("width", w/2.1)
	      .style("padding-top","10px")
	      .style("background-color", "transparent")
      	.style("opacity", 0)
      	.style("color", '#fff')
      	.style("font-size", 50)	      	 
		    .style("font-family", "Georgia")		 
		    .style("font-weight", "bold") 
		    .html("<div id = 'country_header_body' style = 'line-height:40px; font-size:40px; "+ 
          "height:"+h/6+"; width:"+w/2.1+"'><span>"+@active_name+"</span></div>")
				.transition()
					.style("opacity",1)
					.duration(500)
				.transition()
					.delay(50)
					.duration(500)
				  .style("color", label_green.brighter())
    # paint the labels
      # a scale for equally-spaced sector labels
  highest_label = (1/16)*h
  lowest_label = h-((1/16)*h)
  label_left_position = (5/8)*w
  label_height = d3.scale.linear().domain([0,sectorSums.length]).range([highest_label, lowest_label])
  label_increment = d3.min([label_height(1) - label_height(0), 35]) 

      # make a g to hold them
  headers = overlay.append('svg:g')
    .attr('id', 'headers')
    .append("svg:foreignObject")
      .attr("height", (label_increment * (sectorSums.length+2)) + 10)
      .attr("width", (3/8)*w)
      .attr("x", label_left_position-20)
      .attr("y", highest_label - 35)
      .append("xhtml:body")
        .attr('id', 'sectors_body')
        .style("padding-top", "5px")
        .style("background-color", "transparent")
  # get the body content, then load it
  headers_html = "<div style='text-align:left;color:white;'><p style='font-size:1.4em;'><b>Sectors:</b></div>" 

  sectorSums.forEach((s) ->
    headers_html += "<p style='text-align:left;font-size:#{bigger_font_size}px;color:#{c_sector(s.key)}'>" +
      "<b>#{s.key}</b>:<br> -- $#{nicemoney(Math.round(s.values.value))} ("+ 
        "<a style='color:#bbb' href='/projects?active_string=Active&country_name=#{@active_name}&sector_name=#{s.key}'>" +
        "#{s.values.count} #{"project".pluralize(s.values.count)}</a>)</p>"
  )

      # load the headers 
  headers.html(headers_html)

 # paint the area chart
  # hold it it a g
  area_chart = overlay.append('svg:g')
    .attr("id", "area_chart")
    .attr('transform', 'translate('+(.125*w)+','+(.2*h)+')')

  # paint the year labels
  xAxis = d3.svg.axis()
    .scale(sector_area_x)
    .orient('bottom')
    .tickFormat(d3.format("f")) 
   	.tickValues(@years)
  area_chart.append("svg:g")
    .attr('class', 'axis')
    .call(xAxis)
    .style('fill', '#ccc')
    .attr('transform', 'translate(0,'+(sector_area_h+2)+')')
    .attr("opacity", 0)


  # paint the amount labels
  yAxis = d3.svg.axis()
    .scale(sector_area_y)
    .orient('left')
    .tickFormat((d) ->  "$"+nicemoneyaxis(d))
  area_chart.append("svg:g")
    .attr('class', 'axis')
    .call(yAxis)
    .style('fill', '#ccc')
    .attr("opacity", 0)

  area_chart.selectAll('.axis')
    .transition()
      .delay((d,i) -> 50*i)
      .attr("opacity", 1)
      .attr('font-size', smaller_font_size)

  # paint the areas
  sector_area_chart = 
    area_chart.selectAll('.sector_area')
        .data(yearSectorStack)
      .enter().append('path')
        .attr('class', 'sector_area overlay')
        .attr("id", (d,i) -> "sectorPath"+i)
        .attr("fill", (d,i) ->  
          console.log("rendering sector ", i)
          c_sector(sectorSums[i].key) )
        .attr("d", null_area)
      .transition()
        .duration(600)
        .attr("d", sector_area)
        


 # paint the pie chart
  # prep the data and function
  pie = d3.layout.pie().sort(d3.ascending)
  pie_data = [100-percent_of_total, percent_of_total]
  pie_radius = 40
  arc = d3.svg.arc().outerRadius(pie_radius)
  
  # tweenPie for pie chart
  tweenPie = (b) ->
    b.innerRadius = 0;
    i = d3.interpolate({startAngle: 0, endAngle: 0}, b);
    (t) ->
       arc(i(t))

  # hold it in a g 
  pie_chart = overlay.append('svg:g')
      .data([pie_data])
    .attr("id", "pie_chart")
    .attr("width", pie_radius*2)
    .attr("height", pie_radius*2)
    .attr("transform", "translate(20,20)")


  # put the arcs in their own gs
  arcs = pie_chart.selectAll("g.arc")
    .data(pie)
  .enter().append("g")
    .attr("class", "arc")
    .attr("transform", "translate(" + pie_radius + "," + pie_radius + ")");

  # put paths in the gs and make them grow
  paths = arcs.append("path")
    .attr("fill", (d, i) -> `i == 1 ? label_green.brighter() : '#fff'`) 

  paths.transition()
    .duration(1000)
    .attrTween("d", tweenPie);

# make a label
  pie_chart.append("text")
    .attr("y", (pie_radius)+2)
    .attr("x", (pie_radius))
    .attr("text-anchor", "middle")
    .attr("fill", label_green.darker() )
    .style("font-weight", "bold")
    .style("font-size", 17)
    .text(""+ percent_of_total+"%")
  
  pie_chart.append("text")
    .attr("y", (pie_radius)+14)
    .attr("x", (pie_radius))
    .attr("text-anchor", "middle")
    .attr("fill", label_green.darker() )
    .style("font-weight", "bold")
    .style("font-size", 12)
    .text("of flows")
  pie_chart.append("text")
    .attr("y", (pie_radius)+26)
    .attr("x", (pie_radius))
    .attr("text-anchor", "middle")
    .attr("fill", label_green.darker() )
    .style("font-weight", "bold")
    .style("font-size", 12)
    .text("on map.")
# Drawing the line chart comparing CDF/GNI and ODA/GNI -- tough because requires ~current~ USD, not constant USD!
  # set the scene
     # Set the constants
  window.line_chart_height = (1/8)*w
  window.line_chart_width = .35*w
  window.line_chart_offset_y = (60/80)*h
  window.line_chart_offset_x = w - line_chart_width - 50
  window.line_text_margin = 33

   # put it all in a g
  window.line_chart= overlay.append('svg:g')
    .attr('id', 'line_chart')
    .attr('transform', 'translate('+line_chart_offset_x+', '+line_chart_offset_y+')') 
  # background darker
  line_chart.append('svg:rect')
    .attr('id', 'line_chart_background')
    .attr('x', -.025*w)
    .attr('y', -.025*h)
    .attr('height', (.2*w))
    .attr('width', line_chart_width + 50)
    .attr('stroke', 'transparent')
    .style('fill', 'hsla(0, 0%, 10%, 0.5)')

  # request related data, then call a function to draw the line chart
  wbi_call = (country_iso, indicator_code) ->
   "http://api.worldbank.org/countries/#{country_iso}/indicators/#{indicator_code}?per_page=50&date=1999:2012&format=json"
  window.worldbank_gni_url = wbi_call @active_iso, "NY.GNP.ATLS.CD"
  window.worldbank_dacoda_url = wbi_call @active_iso, "DC.DAC.TOTL.CD"
  window.worldbank_usaoda_url = wbi_call @active_iso, "DC.DAC.USAL.CD"

  cdf_path = '/aggregates/projects?get=year&flow_class=ODA-like*OOF-like*Vague%20(Official%20Finance)&recipient_iso2='+@active_iso
  # Right now, these ajax called are made in sequence -- can they be made in parallel?
  console.log( "starting wdi calls")
  d3.json("/ajax?url=#{encodeURIComponent(worldbank_gni_url)}", (gni_data) ->
    #console.log "sending call to #{worldbank_dacoda_url}"
    d3.json('/ajax?url='+encodeURIComponent(worldbank_dacoda_url), (dacoda_data) ->
      d3.json('/ajax?url='+encodeURIComponent(worldbank_usaoda_url), (usaoda_data) ->
        d3.json(cdf_path, (cdf_data) ->
          # Takes (gni_data, oda_array)
          create_line_graph(gni_data, [{name: "CDF", data: cdf_data, source: cdf_path, color: "#cc3333"}, 
	        														 {name: "DAC ODA", data: dacoda_data, source: worldbank_dacoda_url, color: "#6699ff"}, 
	        														 {name:"USA ODA", data: usaoda_data, source: worldbank_usaoda_url, color: "cccc66"}
	        														 ])
        )
      )
    )
  )

# Set targets, get the top x projects, then call a function to paint them
# set targets
# Top projects box target
  top_projects_offset_x = 20
  top_projects_offset_y = (58/80)*h
  top_projects_height = (2/8)*h
  top_projects_width  = .5*w

  top_projects_group = overlay.append('svg:g')
    .attr('id', 'top_projects')
    .attr('transform', 'translate('+top_projects_offset_x+', '+top_projects_offset_y+')')
    .append('svg:foreignObject')
      .attr("id", "top_projects_body")
      .attr("height", .05*h)
      .attr("width", top_projects_width)
      .style("background-color", "hsla(319, 0%, 100%, 0.7)")
      .style("margin","0 0 0 0")
      .style("padding","5px 5px 5px 5px")
      .append("xhtml:body")
        .attr('height', .05*h)
        .style('background-color', 'transparent')
        .style('color', 'black')
        .html("<p><b>Loading top projects...</b></p>")

  top_projects_path = '/projects/json'
  top_projects_params = @active_params || {}
  top_projects_params.active_string =  "Active"
  top_projects_params.order_by = "usd_2009"
  top_projects_params.dir = "desc"
  top_projects_params.max = top_projects_number = 5
  top_projects_params.recipient_iso2 = @active_iso
  delete top_projects_params?.get
 
  window.c_projects = d3.scale.linear()
      .domain([0, ((top_projects_number-1)/2), top_projects_number-1])
      .range(['#2A5C0B', '#55760f','#808f12'])

  $.post(top_projects_path, top_projects_params, (top_projects_data) -> 


    plot_top_projects(top_projects_data, sectorSums)
    create_top_projects_box(top_projects_data, "top_projects_body", top_projects_height)
  , "json")


#Make the top projects list
create_top_projects_box = (projects, target, height) ->

  body_html = "<div style='text-align:left;font-size:"+medium_font_size+";'><p><b>Top projects in "+@active_name+":</b></p><ul>"
  projects.forEach((p, i) ->
    body_html += "<li style='color:"+window.c_projects(i)+
      "'><span style='color:black'><a href='/projects/"+p.id+"'>"+p.title+"</a> ("+(p.year ? "<i>no year</i>")+
      "), $"+nicemoney(p.usd_2009)+"</span></li>"
  )
  body_html +="</ul></div>"

  foreign_object = d3.select('#'+target);

  foreign_object
    .transition()
      .attr('height', 0)

  foreign_object_jq = $('#'+target)
  foreign_object_jq.children().remove()
  foreign_object_jq.append('<xhtml:body>'+body_html+'</xhtml:body>')

  foreign_object
    .transition()
      .attr('height', height)


plot_top_projects = (projects, sectorSums) ->
  sectors = sectorSums.map((s) -> s.key )


  point_stack_height = (project) -> 
    # UH oh, what if there are 2 in the same year?
    stack_object = yearSectorStack[sectors.indexOf(project.sector_name)][project.year-d3.min(@years)]
    if stack_object
      stack_object.y0 + stack_object.y 
    else
     0

  project_points = d3.select("#areaChart").selectAll('.project_point')
      .data(projects)
    .enter().append('svg:circle')
      .attr('cx', (d) ->  sector_area_x(d.year))
      .attr('cy', (d) ->  sector_area_y(d.usd_2009))
      .attr('r', 3)
      .attr('fill', (d,i) -> window.c_projects(i))
      .attr('stroke','black') #(d) ->  c_sector(d.sector_name))
      .attr('stroke-weight', 1)
      .append('title')
        .text((d) ->  d.title)


# Make the line graph 
create_line_graph = (gni_data, oda_array) ->
# oda_array objects are {name: "Name", data: (unprocessed data...), source: "Some URL", color: "display CSS color"}
# constants were set before function call!
  d3.select('#line_chart_background')
  .transition()
    .attr('height', line_chart_height + line_text_margin + 25)


 # prep the data: For each data object, iterate over years, grabbing relevant data and pushing them to the objects graph_data array
 		# make the graph data arrays
 	#	oda_array.forEach((d) ->	d.graph_data = [] )
 		
 		# For each given oda_array
  years = window.years
  #console.log "years", years
  oda_array.forEach((d) ->
    d.graph_data = []  
    if d.source.indexOf('api.worldbank')!=-1 	# That is, it's from World Bank, so give it the treatment
      console.log('checking WDI array', d)
      years.forEach((year) ->
        # find the right point then push it. 
        amount = d.data[1].filter((c) -> Number(c.date) is year)[0]
        gni_value = gni_data[1].filter((c) -> Number(c.date) is year)[0]
        if gni_value && amount
          data_point = [year, (100*Number(amount.value))/Number(gni_value.value)]
          d.graph_data.push(data_point)	
      )
    else if (d.source.indexOf('aggregates/projects')!=-1)  # That is, it's from the China API
      console.log("checking internal array", d)
      years.forEach((year) ->
        amount = d.data.filter((c) -> Number(c.year) is  year)[0]  
        gni_value = gni_data[1].filter((c) -> Number(c.date) is year)[0]?.value
        #console.log amount, gni_value
        if amount && gni_value
          data_point= [year, (100*Number(amount.usd_current))/Number(gni_value)]
          d.graph_data.push(data_point)	
        )
    )


  annual_maximum_finance_over_gni = d3.max(oda_array.map((a) -> d3.max(a.graph_data,(v) -> v[1])))
  line_percent_scale = d3.scale.linear().domain([0,(annual_maximum_finance_over_gni + (annual_maximum_finance_over_gni/10))]).range([line_chart_height, 0])
  line_year_scale = d3.scale.linear().domain([d3.min(@years), d3.max(@years)]).range([0,line_chart_width])
  #console.log "Starting the line graph", oda_array
  # paint the year labels
    # For prettiness, if very few years, use exactly those for labels.
  if @years.length >= 6
	  line_xAxis = d3.svg.axis()
	    .scale(line_year_scale)
	    .orient('bottom')
	    .ticks(6)
	    .tickFormat(d3.format("f")) 
  else 
	  line_xAxis = d3.svg.axis()
	    .scale(line_year_scale)
	    .orient('bottom')
	    .tickValues(@years)
	    .tickFormat(d3.format("f"))    
    
  line_chart.append("svg:g")
    .attr('class', 'axis')
    .call(line_xAxis)
    .style('fill', '#ccc')
    .attr('transform', 'translate(0,'+(line_chart_height+2)+')')
    .attr("opacity", 1)
  # paint the percent labels
  line_yAxis = d3.svg.axis()
    .scale(line_percent_scale)
    .ticks(4)
    .orient('right')

  line_chart.append("svg:g")
    .attr('class', 'axis')
    .call(line_yAxis)
    .style('fill', '#ccc')
    .attr('transform', 'translate('+line_chart_width+')')
    .attr("opacity", 1)
  # Paint everything else -- this could be cleaner if you made a svg:g
  # for each item in oda_array, then called lines and labels inside those gs
  # But I couldn't get it to do right, so I'm putting them right in line_chart.
	# paint lines
  gni_line = d3.svg.line()
    .x((d) -> line_year_scale(d[0]))
    .y((d) -> line_percent_scale(d[1]))
  gni_stroke_width = 3  		
  #console.log(oda_array, line_chart)
  line_chart.selectAll('.gni_line')
			.data(oda_array)
		.enter().append('svg:path')
			  .attr('class', 'gni_line')
        .attr('d',(d) ->  gni_line(d.graph_data))
        .style('stroke', (d) ->  d.color)
        .style('fill', 'transparent')
        .style('opacity', '.6')
        .attr('stroke-width', gni_stroke_width)
      
	# paint line labels
  line_chart.selectAll('.gni_label')
	  .data(oda_array)
	  .enter().append('svg:text')
      .attr('class', 'gni_label')
      .text((d) ->  d.name)
      .style('fill', (d) ->  d.color)
      .attr('text-anchor', 'bottom')
      .attr('x', (d,i) -> ((3+(i*8))/80)*w )        
      .attr('y', line_chart_height + line_text_margin)
  # paint the heading
  line_chart.append('svg:text')
    .text("Finance/GNI")
    .style('fill', 'white')
    .attr('text-anchor', 'top')
    .attr('y', 0)
    .attr('x', (line_chart_width/2)-(this.length/2))
    .style('font-weight', 'bold')
    .style('text-decoration', 'underline')

  # paint sources
  line_chart.append('svg:foreignObject')
    .attr('x', -.025*w)
    .attr('y', line_chart_height + line_text_margin + 5)
    .attr('width', line_chart_width + 50)
    .attr('height', .025*h)
    .append('xhtml:body')
      .style('padding', '2px 2px 2px 2px')
      .style("background-color", "hsla(319, 0%, 100%, 0.5)")
      .style('text-align', 'center')
      .style('vertical-align', 'center')
      .html('<p style="color:#333;font-size:'+medium_font_size+';"><b>Sources: </b> <a href="'+worldbank_gni_url+'">GNI</a>, ' +
        oda_array.map((d) ->  "<a href='#{d.source}'>#{d.name}</a>").join(', ') + '</p>')

# Remove overlay
removeOverlay = () ->
  d3.selectAll('.overlay')
    .transition('opacity', 0)
    .delay(10)
    .duration(100)
    .remove()
    unfuzz(0, 100)

#Get mouse position and move tooltip
updateMousePosition = (event) ->
  mousePosition = {left: event.pageX, top: event.pageY}
  $('div#tooltip').css('left',mousePosition.left+10)
  $('div#tooltip').css('top',mousePosition.top-25) 

$(document).mousemove(updateMousePosition);
# Highlight + Unhighlight + tooltip
@highlight = () ->
  d3.select(this)
  .transition()
    .attr("stroke", "#ddd")   
  # get the country info
  @active_iso = this.id
  @active_name = $(this).attr("name")
  #show and write the tooltip
  $('div#tooltip').show()
  $('p#tooltiptext').html(@active_name+"<br> Total: $"+nicemoney(map_data_item(@active_iso).values.value))


@highlightnull = () ->
  # get the country info
  @active_iso = this.id
  @active_name = $(this).attr("name")
  #show and write the tooltip
  $('div#tooltip').show()
  $('p#tooltiptext').html(@active_name+"<br>No active projects")


@unhighlight = () ->
  d3.select(this)
  .transition()
    .attr("stroke",() -> ($(this).attr("name") && $(this).attr("id")!="non_african") ? "#333" : "" )
    $('div#tooltip').hide()
    $('p#tooltiptext').text("")


@fuzz = () ->
  d3.selectAll('.fuzz')
    .transition()
      .attr("filter", "url(#blur)");    
#Rescale legend
 #Redraw rects
  vis.selectAll('rect#legend')
    .transition()
      .attr("width", 0);
 #Redraw text
  vis.selectAll('text#legend')
    .transition()
      .attr("fill","#FFFFFF")
      .text("");     

@unfuzz = (delay, duration) -> 
  d3.selectAll('.fuzz')
    .transition()
      .delay(delay || 100)
      .duration(duration || 100)
      .attr("filter", "")
      .each("end", @recolor_and_add_listeners)

  if logscale.ticks().length>0
     #Rescale legend
    oldlegendArray= logscale.ticks()
    newlegendArray= []
    newlegendArray.push(oldlegendArray[(oldlegendArray.length/2).toFixed(0)])
    newlegendArray.push(oldlegendArray[(oldlegendArray.length*(3/4)).toFixed(0)])
    newlegendArray.push(oldlegendArray[(oldlegendArray.length*(5/6)).toFixed(0)])
    newlegendArray.push(oldlegendArray[(oldlegendArray.length*(7/8)).toFixed(0)])
    newlegendArray.push(oldlegendArray[(oldlegendArray.length*(15/16)).toFixed(0)])
    newlegendArray = newlegendArray.concat(oldlegendArray.slice(-1))
    #Redraw rects
    vis.selectAll('rect#legend')
        .data(newlegendArray)
        .transition().duration(1000)
        .attr("width", (d,i) ->  (min_bar_height+(i*bar_height_increment)))
        .attr("fill", (d) ->  c(d));
    #Redraw text
    vis.selectAll('text#legend')
      .data(newlegendArray)
    .transition().duration(1000)
      .attr("fill", (d,i) ->  greyscalec(i))
      .text((d) ->  "$" + nicemoney(d))

    
@recolor_and_add_listeners = () ->
  country = d3.select(this);
  data_item = map_data_item(this.id)
  if data_item?.values.value > 0 
    country
      .on("click", click)
      .on("mouseover", @highlight)
      .on("mouseout", @unhighlight)
      .style('cursor', 'pointer')

  else 
    country
      .on("click", "")
      .on("mouseover", @highlightnull)
      .on("mouseout", @unhighlight)
      .style('cursor', '')
        .transition()
          .attr("fill",  "#777")

Array.prototype.getUnique = () ->
  u = {}
  a = []
  for item, i in this
    if u.hasOwnProperty item
      continue
    a.push item
    u[item] = 1
  a



String.prototype.pluralize = (count, plural) ->
  if count == 1  
    this
  else 
    if !plural
      plural = this + 's'
    plural


@make_legend = (legendAmounts) ->
#---------------------------  LEGEND  ----------------------------------
  oldlegendArray= legendAmounts
  newlegendArray= []
  newlegendArray.push(oldlegendArray[(oldlegendArray.length/2).toFixed(0)])
  newlegendArray.push(oldlegendArray[(oldlegendArray.length*(3/4)).toFixed(0)])
  newlegendArray.push(oldlegendArray[(oldlegendArray.length*(5/6)).toFixed(0)])
  newlegendArray.push(oldlegendArray[(oldlegendArray.length*(7/8)).toFixed(0)])
  newlegendArray.push(oldlegendArray[(oldlegendArray.length*(15/16)).toFixed(0)])
  newlegendArray = newlegendArray.concat(oldlegendArray.slice(-1))
  legend_bar_width = (18/800)*w
  legend_bar_margin = 2
  min_bar_height = (6/80)*h
  bar_height_increment = (2/80)*h
  legend_font_size = 10
  max_bar_height = min_bar_height + (bar_height_increment * (newlegendArray.length-1))
  legend = vis.append('g')
      .attr("id", "legend")
      .attr("transform", "translate("+(w/10)+","+((5/8)*h)+")")
  legendBars = legend.selectAll('rect#legend')
      .data(newlegendArray)
    .enter().append('rect')
      .attr("x", "0")
      .attr("y", (d,i) ->  (max_bar_height - (i*bar_height_increment)))
      .attr("height", legend_bar_width)
      .attr("width", "0")
      .attr("fill", (d) ->  c(d))
      .attr("id","legend")

  legend.selectAll('text')
    .data(newlegendArray)
  .enter().append('text')
    .attr("y",(d,i) ->  (max_bar_height - (i*bar_height_increment) + legend_font_size))
    .attr("x", "0" )
    .attr("text-anchor", "start")
    .attr("font-size", legend_font_size)
    .attr("fill",(d,i) ->  "#FFFFFF")
    .text("")
    .attr("id","legend")

  legend.append("svg:foreignObject")
    .attr("height", "100")
    .attr("width", "300")
    .attr("y", max_bar_height+2)
    .append("xhtml:body")
      .style("background-color", "transparent")
      .html("<p style='color:black;'><b>Chinese Development Finance, 2000-2011<b><br><i>USD-2009</i> || <a style='color:#333;'href='/projects'>See the Data</a></p>")

#Fix CV -- Cape Verde is too far 
$('path#CV').attr("transform","translate (80,100)")


`make_map_with_params()`

