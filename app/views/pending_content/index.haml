- provide :title, "Pending Content"
%h1.page-header
  Pending Content

- @pending_content.each do |content_array|
  - next if content_array.empty?
  - first = content_array.first
  - type = first.class.name
  - atts = first.attributes
  - irrelevant = %w(id updated_at owner_id published)
  %h2
    = type.pluralize
  %table{id: "#{type}", class: "table table-hover sortable"}
    %thead
      %tr
        -# headers, first is blank for checkbox
        %th
        %th id
        - irrelevant.each {|x| atts.delete(x) }
        - if type == "Project"
          %th Title
          %th Sources
        - else
          - if type == "Flag"
            %th Project
          - atts.each do |key,value|
            %th= key.humanize
    %tbody
      - content_array.each do |content|
        %tr{id: "#{content.id}"}
          %td
            %input{type: "checkbox", value: "yes" }
          - if type == "Project"
            %td= link_to content.id, project_path(content)
            %td= content.title
            - url_list = ""
            - content.sources.each do |src|
              %td= link_to(src.url, src.url)
          - else
            %td= content.id
            - indiv_atts = content.attributes
            - irrelevant.each {|x| indiv_atts.delete(x) }

            - if type == "Flag"
              - project = content.project
              %td= link_to project.id, project

            - indiv_atts.each do |att|
              - key = att[0]
              - value = att[1]
              - case key
              - when "created_at"
                %td= content.created_at.to_s(:short)
              - when "project_id"
                %td= link_to(value, "/projects/#{value}")
              - else
                %td= value


  %button{id: "#{type}-Approve"}Approve
  %button{id: "#{type}-Delete"}Delete

= javascript_include_tag "bootstrap_sortable/index"
= stylesheet_link_tag "bootstrap-sortable"
:javascript
  // grab all the buttons
  $("button").each(function() {
    $(this).click(function() {
      //figure out the table name they are associated with
      var split = this.id.split('-');
      var class_name = split[0];
      var approved = split[1];
      var str = '#' + class_name + ' tr';
      // send all the checked rows
      $(str).filter(':has(:checkbox:checked)').each(function() {
        $tr = $(this)
        $('td', $tr).each(function() {
          
        });
        manageRow(this, approved, class_name);
      });

    });
  });
  
  function manageRow(row, approved, class_name){
    var id = $(row).children()[1].textContent;
    var post_url = "/pending_content/";
    if (approved == "Approve") {
      post_url = post_url + "approve";
    } 
    else { 
      post_url = post_url + "destroy";
    }
    content_data = { "id": id, "class_name": class_name };
    $.ajax({
      url: post_url,
      data: content_data,
      type: 'POST',
      success: function(result) {
        deleteRow(row.id);
        ApplySortability();
      }
    });
  }

  function deleteRow(rowId){
    var row = document.getElementById(rowId);
    row.parentNode.removeChild(row);
  }
