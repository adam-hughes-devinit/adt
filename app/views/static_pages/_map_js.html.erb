<h2 id='counter'></h2>
<div id="vis"></div>
<%= javascript_include_tag "http://d3js.org/d3.v2.js" %>
<%= javascript_include_tag "collection.js" %>
<script type="text/javascript">
// Preparing the map
var w = 800,
    h = w*(1),
    total_projects = <%= total_projects %>
    xy = d3.geo.mercator().scale(w*4.5).translate([100,300]),
    path = d3.geo.path().projection(xy),
    c = d3.scale.linear().domain([0,8000000000,150000000000]).range(['#FAEDD9', '#808F12', '#2A5C0B']),
    c_sector= d3.scale.category20c(),
    money = d3.format("0,r"),
    years = d3.range(2000,2012), 
    //eventually this will hold projects -- 
    project_data = [],
    total_cdf_in_view = 0 
    ;

var pie = d3.layout.pie()
   .value(function(d) {return d.value});

var vis = d3.select("#vis")
  .append("svg:svg")
    .attr("id", "africa-map")
    .attr("width", w)
    .attr("height", h)    
    ;

// Trying out filter for the overlay
var filter = vis.append("svg:defs")
  .append("svg:filter")
    .attr("id", "blur")
  .append("svg:feGaussianBlur")
    .attr("stdDeviation", 5);

// Make the map -- but know that the data is changing
var map = vis.append("svg:g")
    .attr("id", "states")
  .attr("transform","translate(100,"+ w/8 + ")")
  ;
  
var countries =  d3.select("#states")
    .selectAll("path")
      .data(collection.features)
  .enter().append("svg:path")
      .attr("class", "fuzz country")
      .attr("id", function(d, i) {return d.id})
      .attr("name", function(d) {return d.properties.name})
      .attr("d", path)
      .attr("stroke-width", 1)
      .attr("stroke", "#333")
      .attr("fill", "#777")
      // to be removed after load
      .attr("filter", "url(#blur)")
      // add the listeners after load
      ;



map_data = d3.nest()
  .key(function(d) {return d.id})
  .rollup(function(d) {return {"value" : null}})
  .entries(collection.features)

function map_data_item(iso2) {
  item = map_data.filter(function(m) {return m.key == iso2})[0]
  if (item) {
    return item }
  else {
    return null}
}

function add_values_to_map() {
  d3.json('/aggregates/projects?get=recipient_iso2', function(json){
    json.forEach(function(d, i) {
      map_item = map_data_item(d.recipient_iso2)
      
      if (map_item) {
      item_delay = 20
      item_duration = 110
      map_item.values.value = d.usd_2009 
      d3.select('#states #'+d.recipient_iso2)

                .transition()
                  .delay(function(d) {return item_delay*i})
                  .duration(item_duration)
                  .attr("fill",  c(map_item.values.value))
          // total cdf in view
          total_cdf_in_view+= d.usd_2009
        }

    })
    d3.selectAll('.fuzz')
     .transition()
      .delay(item_delay * json.length + 2*(item_duration))
      .attr("filter", "")
      .each("end", recolor_and_add_listeners)
  })
}

function recolor_and_add_listeners() {
  country = d3.select(this);
  data_item = map_data_item(this.id)
  if (data_item && data_item.values.value) {
  country
      .transition()
        .attr("fill",  c(data_item.values.value))

  country
    .on("click", click)
    .on("mouseover", highlight)
    .on("mouseout", unhighlight)
    .attr("cursor", "pointer")

  }
}


add_values_to_map()


// Click 
function click() {

  // get the country info
  activeIso = this.id
  activeName = $(this).attr("name")

 // these are all the records for the active country:
 activeCountryData = []
  d3.json("/aggregates/projects?get=sector_name,year&recipient_iso2="+activeIso, function(json){
    activeCountryData = json
    try_drawing_map()
  }) 
}

function try_drawing_map() {
 if (activeCountryData.length == 0){
  return
}
  d3.selectAll('.fuzz')
    .transition()
      .attr("filter", "url(#blur)");

  // prep a g for the overlay
  overlay = vis.append('svg:g')
      .attr('id', 'overlay-wrapper')
      .attr('class', 'overlay')
  // drop down the gray sheet
  overlay.append('svg:rect')
    .attr("id", "grayBox")
    .attr('class', 'overlay')
    .attr("height", h)
    .attr("width", w)
    .attr("fill", "#000")
    .attr("opacity", 0)
    .on("click", removeOverlay)
  .transition()
    .duration(200)
    .attr("opacity", .6)
    ;
 // build year/sector data (for stack):
    // this is going to hold one array for each sector that is present
    stackLayers = []

    // get all the present sectors
    sectors = activeCountryData.map(function(d) {return d.sector_name}).getUnique()

    // you have to have an entry for each year -- arrays have to be same length
    sectors.forEach(function(sector) {
      sectorLayer = []
      // years is defined at the top -- range 2000 to 201x
      years.forEach(function(year) {
        pointData = activeCountryData.filter(function(d) {return d.year == year && d.sector_name == sector})
        point = {x: year, y: d3.sum(pointData, function(d) {return d.usd_2009})}
        sectorLayer.push(point)
      })
      stackLayers.push(sectorLayer)
    })

 yearSectorStack = d3.layout.stack()
  (stackLayers)

 // build sum data (for labels):
 sectorSums = d3.nest() 
  .key(function(d){return d.sector_name})
  .rollup(function(data) { return { "value" : d3.sum(data, function(d) {return d.usd_2009}), "count" : d3.sum(data, function(d) {return d ? 1 : 0 })}})
  .entries(activeCountryData)

 // build percent of total cdf data (for pie):
 percent_of_total = Math.round(((map_data.filter(function(d) {return d.key == activeIso }))[0].values.value/total_cdf_in_view)*1000)/10



  // use the data to build scales
  annual_amounts = []
  yearSectorStack[0].forEach(function(d,i) {
    annual_amount = 0
    yearSectorStack.forEach(function(e) {
      annual_amount += e[i].y
    })
    annual_amounts.push(annual_amount)
  })

    // in $5mil increments, and if less than $1mil, $1mil is the max
  annual_maximum = Math.max(Math.round(d3.max(annual_amounts)/5000000)*5000000, 10000000)



  var sector_area_h = 370
    sector_area_w = 370
    sector_area_y = d3.scale.linear().domain([0,annual_maximum]).range([sector_area_h, 0])
    sector_area_x = d3.scale.linear().domain([d3.min(years), d3.max(years)]).range([0,sector_area_w])

  var sector_area = d3.svg.area()
    .x(function(d) {return sector_area_x(d.x)})
    .y0(function(d) {return sector_area_y(d.y0)})
    .y1(function(d) {return sector_area_y(d.y + d.y0)})
    .interpolate('monotone')

  var null_area = d3.svg.area()
    .x(function(d) {return sector_area_x(d.x)})
    .y0(sector_area_h)
    .y1(sector_area_h)
    .interpolate('monotone')


  // paint the header and labels
    // paint the header
     overlay.selectAll('#country_header')
        .data([activeName])
      .enter().append('svg:text')
        .attr("id", "country_header")
        .attr("class", "overlay")
        .attr("x",190)
        .attr("y", 100)
        .text(String)
        .attr("opacity", 0)
        .attr("fill", '#222')
        .attr("font", "Georgia")
        .attr("font-weight", "bold")
        .attr("font-size", "5em")
      .transition()
        .attr("opacity",1)
        .duration(500)
      .transition()
        .duration(500)
        .attr("fill", "#819014")
        ;
    // paint the labels


      // a scale for equally-spaced sector labels
        highest_label = 150
        lowest_label = h-50
        label_left_position = w - 300
        label_height = d3.scale.linear().domain([0,sectorSums.length]).range([highest_label, lowest_label])
        label_increment = d3.min([label_height(1) - label_height(0), 35])

      // a header 
        overlay.append("svg:foreignObject")
          .attr("height", 100)
          .attr("width", 500)
          .attr("x", label_left_position-20)
          .attr("y", highest_label - 35)
          .append("xhtml:body")
            .style("padding-top", 0)
            .style("background-color", "transparent")
            .html("<div style='text-align:left;color:white;'><p style='font-size:1.4em;'><b>Sectors:</b><br><span style='font-size:12px'><i>Click to see projects</i></span></p></div>")

      // add the labels
        overlay.selectAll('.sector_label')
          .data(sectorSums)
        .enter().append("foreignObject")
          .attr("id", function(d,i) {return "sectorPath"+(sectorSums.length-(i+1))})
          .attr("class", "overlay sector_label")
          .attr("width", 550)
          .attr("height", 30)
          .attr("x", label_left_position)
          .attr("y", function(d,i) {return highest_label + (label_increment*i)})
          .append('xhtml:body')
            .style("padding-top", 0)
            .style("color", function(d) {return c_sector(d.key)})
            .style("background-color", "transparent")
            .html(function(d) {return "<a href='/projects?country_name="+activeName+"&sector_name="+d.key+"'><p style='font-size:14px;'><b>"+ d.key +"</b>:<br> -- $" +money(Math.round(d.values.value))+ "</p></a>"}) 

 // paint the area chart
  // hold it it a g
  area_chart = overlay.append('svg:g')
    .attr("id", "area_chart")
    .attr('transform', 'translate(100,200)')

  // paint the year labels
  xAxis = d3.svg.axis()
    .scale(sector_area_x)
    .orient('bottom')
    .tickFormat(d3.format("f")) 
  area_chart.append("svg:g")
    .attr('class', 'axis')
    .call(xAxis)
    .style('fill', '#ccc')
    .attr('transform', 'translate(0,'+(sector_area_h+2)+')')
    .attr("opacity", 0)


  // paint the amount labels
  yAxis = d3.svg.axis()
    .scale(sector_area_y)
    .orient('left')
  area_chart.append("svg:g")
    .attr('class', 'axis')
    .call(yAxis)
    .style('fill', '#ccc')
    .attr("opacity", 0)

  area_chart.selectAll('.axis')
    .transition()
      .delay(function(d,i) {return 50*i})
      .attr("opacity", 1)

  // paint the areas
    var sector_area_chart = 
      area_chart.selectAll('.sector_area')
          .data(yearSectorStack)
        .enter().append('path')
          .attr('class', 'sector_area overlay')
          .attr("id", function(d,i) {return "sectorPath"+i})
          .attr("fill", function(d, i) {return c_sector(sectorSums[i].key)})
          .attr("d", null_area)
        .transition()
          .duration(600)
          .attr('d', sector_area)


 // paint the pie chart
  // prep the data and function
    var pie = d3.layout.pie().sort(d3.ascending),
        pie_data = [100-percent_of_total, percent_of_total],
        pie_radius = 70,
        arc = d3.svg.arc().outerRadius(pie_radius)
          
          // tweenPie for pie chart
          function tweenPie(b) {
            b.innerRadius = 0;
            var i = d3.interpolate({startAngle: 0, endAngle: 0}, b);
            return function(t) {
              return arc(i(t));
            };
          }


  // hold it in a g 
  var pie_chart = overlay.append('svg:g')
      .data([pie_data])
    .attr("id", "pie_chart")
    .attr("width", pie_radius*2)
    .attr("height", pie_radius*2)
    .attr("transform", "translate(15,10)")

  // make a label
  pie_chart.append("text")
    .attr("y", (pie_radius*2)+16)
    .attr("text-anchor", "left")
    .attr("fill", "#819014")
    .style("font-weight", "bold")
    .style("font-size", 12)
    .text(activeName+": "+percent_of_total+"% of total")
  // put the arcs in their own gs
  var arcs = pie_chart.selectAll("g.arc")
    .data(pie)
  .enter().append("g")
    .attr("class", "arc")
    .attr("transform", "translate(" + pie_radius + "," + pie_radius + ")");

  // put paths in the gs and make them grow
  var paths = arcs.append("path")
    .attr("fill", function(d, i) { return i == 1 ? '#819014' : '#fff'}); //#FAEDD9

  paths.transition()
    .duration(1000)
    .attrTween("d", tweenPie);



<% if Rails.env.development? %> 
 // For development
 console.log(activeIso +", "+ activeName)
 console.log("activeCountryData:")
 console.log(activeCountryData)
 console.log("sectorSums:")
 console.log(sectorSums)
 console.log("yearSectorStack:")
 console.log(yearSectorStack)
 console.log("percent_of_total")
 console.log(percent_of_total)
 console.log("annual_maximum")
 console.log(annual_maximum)
 console.log("pie_data")
 console.log(pie_data)
<% end %>

}



// Remove overlay
function removeOverlay() {

  d3.selectAll('.overlay')
    .transition('opacity', 0)
    .delay(10)
    .duration(100)
    .remove()

  d3.selectAll('.fuzz')
    .transition()
     .duration(100)
     .attr("filter", "")
}
// Highlight + Unhighlight

function highlight() {
  d3.select(this)
  .transition()
    .attr("stroke", "#ddd")
}

function unhighlight() {
  d3.select(this)
  .transition()
    .attr("stroke",function() {return $(this).attr("name") ? "#333" : ""})
}

Array.prototype.getUnique = function(){
   var u = {}, a = [];
   for(var i = 0, l = this.length; i < l; ++i){
      if(u.hasOwnProperty(this[i])) {
         continue;
      }
      a.push(this[i]);
      u[this[i]] = 1;
   }
   return a;
}

   
//---------------------------  LEGEND  ----------------------------------
legendAmounts=[100000000,500000000,10000000000,50000000000,100000000000,150000000000]
legend_bar_width = 18
legend_bar_margin = 2
min_bar_height = 60
bar_height_increment = 20
legend_font_size = 10
max_bar_height = min_bar_height + (bar_height_increment * (legendAmounts.length-1))
var legend = vis.append('g')
    .attr("id", "legend")
    .attr("transform", "translate(70,500)")
    .attr("class", 'fuzz')
var legendBars = legend.selectAll('rect')
    .data(legendAmounts)
  .enter().append('rect')
    .attr("x", function(d,i) {return ((i*(legend_bar_margin+legend_bar_width)))})
    .attr("y", function(d,i) {return (max_bar_height - (i*bar_height_increment))})
    .attr("width", legend_bar_width)
    .attr("height", function(d, i) {return (min_bar_height+(i*bar_height_increment))})
    .attr("fill", function (d) {return c(d)})
  ;
legend.selectAll('text')
  .data(legendAmounts)
.enter().append('text')
  .attr("y",function(d,i) {return (legend_font_size +(i*( legend_bar_margin+legend_bar_width)))})
  .attr("x", function(d,i) {return -1*(max_bar_height +min_bar_height - legend_bar_margin)})
  .attr("text-anchor", "start")
  .attr("font-size", legend_font_size)
  .attr("fill", "#333")
  .attr("transform",function(d,i) {return "rotate(-90)"})
  .text(function(d) {return "$" + money(d)})

legend.append("svg:foreignObject")
  .attr("height", "100")
  .attr("width", "300")
  .attr("y", max_bar_height+2)
  .append("xhtml:body")
    .style("background-color", "transparent")
    .html("<p style='color:white;'><b>Chinese Development Finance, 2000-2011<b><br><i>USD-2009</i> || <a style='color:#eee;'href='/projects'>See the Data</a></p>")
</script>