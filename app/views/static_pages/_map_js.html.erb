<div id = "vis_controls" class="row">
<%= form_for Project.new do |f| %>
  <%= f.select :oda_like, OdaLike.all.collect {|o| o.name}, {}, {multiple: true, class: "span3 vis_input", id: "oda_like_input"}  %>
  <%= f.select :verified, Verified.all.collect {|o| o.name}, {}, {class: "span3 vis_input", multiple: true, id: "verified_input"}  %>  
  <%= f.select :sector, Sector.all.collect {|o| o.name}, {}, {class: "span3 vis_input", multiple: true, id: "sector_input"}  %>
  <%= f.select :flow_type, FlowType.all.collect {|o| o.name}, {}, {class: "span3 vis_input", multiple: true, id: "flow_type_input"}  %>
<% end %>
</div>
<div id="vis"></div>
<script type="text/javascript">

$('.vis_input').change(function() {
active_params = gather_inputs()
make_map_with_params(active_params)
})

function gather_inputs () {

 oda_likes =[]
 $('#oda_like_input option:selected').each(function(d) {oda_likes.push($(this).text())})
 verifieds =[]
 $('#verified_input option:selected').each(function(d) {verifieds.push($(this).text())})
 sectors =[]
 $('#sector_input option:selected').each(function(d) {sectors.push($(this).text())})
 flow_types =[]
 $('#flow_type_input option:selected').each(function(d) {flow_types.push($(this).text())})


input_params = {}
oda_likes.length > 0 ? input_params.flow_class= oda_likes : null;
verifieds.length > 0 ? input_params.verified= verifieds : null;
sectors.length > 0 ? input_params.sector_name= sectors : null;
flow_types.length > 0 ? input_params.flow_type= flow_types : null;

return input_params
}
// Preparing the map
var w = 800,
    h = w*(1),
    xy = d3.geo.mercator().scale(w*4.5).translate([100,300]),
    path = d3.geo.path().projection(xy),
    c = d3.scale.linear().domain([0,8000000000,150000000000]).range(['#FAEDD9', '#808F12', '#2A5C0B']),
    c_sector= d3.scale.category20c(),
    money = d3.format("0,r"),
    years = d3.range(2000,2012), 
    total_cdf_in_view = 0, 
    active_params = {}
    ;
<% if Rails.env.development? %>
var top_projects_data =[]
<% end %>

var pie = d3.layout.pie()
   .value(function(d) {return d.value});

var vis = d3.select("#vis")
  .append("svg:svg")
    .attr("id", "africa-map")
    .attr("width", w)
    .attr("height", h)    
    ;

// Trying out filter for the overlay
var filter = vis.append("svg:defs")
  .append("svg:filter")
    .attr("id", "blur")
  .append("svg:feGaussianBlur")
    .attr("stdDeviation", 5);

// Make the map -- but know that the data is changing
var map = vis.append("svg:g")
    .attr("id", "states")
  .attr("transform","translate(100,"+ w/7 + ")")
  ;
var ocean_outline = map.append("svg:path")
      .attr("id", "ocean_outline")
      .attr("d", ocean_outline_d)
      .attr("stroke-width", 10)
      .attr("stroke", "darkblue")
      .style('fill', 'transparent')
      .attr('transform', 'translate(-130, -'+((w/7)+14)+')')
      .attr('filter', "url(#blur)")


var countries =  d3.select("#states")
    .selectAll(".country")
      .data(collection.features)
  .enter().append("svg:path")
      .attr("class", "fuzz country")
      .attr("id", function(d, i) {return d.id})
      .attr("name", function(d) {return d.properties.name})
      .attr("d", path)
      .attr("stroke-width", 1)
      .attr("stroke", "#333")
      .attr("fill", "#777")
      // to be removed after load
      .attr("filter", "url(#blur)")
      // add the listeners after load
      ;

border_line_array = [
  [0,0,0,h], [0,h,w,h], [w,h,w,0], [w,0,0,0]
]
var frame = vis.append('svg:g')
      .attr('id', 'border_lines')
      .selectAll('.border_line')
      .data(border_line_array)
  .enter().append('svg:line')
    .attr('class', 'border_line')
    .attr('x1',function(d) {return d[0]})
    .attr('y1',function(d) {return d[1]})
    .attr('x2',function(d) {return d[2]})
    .attr('y2',function(d) {return d[3]})
    .attr('stroke', '#eee')
    .attr('stroke-width', 8)

map_data = d3.nest()
  .key(function(d) {return d.id})
  .rollup(function(d) {return {"value" : null, "value_current": null}})
  .entries(collection.features)

function map_data_item(iso2) {
  item = map_data.filter(function(m) {return m.key == iso2})[0]
  if (item) {
    return item }
  else {
    return null}
}

function make_map_with_params(params) {
  start = new Date
  item_delay = 20
  item_duration = 300
  // 1. Fuzz over the map and remove listeners.
  <% if Rails.env.development? %>
  console.log("1. fuzz "+time_since(start))
  <% end %>

  fuzz()
  d3.selectAll('.country')
          .on("click", '')
          .on("mouseover", '')
          .on("mouseout", '')
          .style('cursor', '')

  // 2. Get country sums by params
  <% if Rails.env.development? %>
  console.log("2. Ajax call "+time_since(start))
  <% end %>

  post_params = params || {}
  post_params.get = "recipient_iso2"
  $.post('/aggregates/projects', post_params, function(json){
    // 3. Change map_data + total_cdf_in_view
    <% if Rails.env.development? %>
    console.log("3. Change map_data + total_cdf_in_view " +time_since(start))
    <% end %>
    // 4. color 
    <% if Rails.env.development? %>
    console.log("4. color "+time_since(start))
    <% end %>    
    map_data.forEach(function(d,i) {
      if (n = json.filter(function(j) {return j.recipient_iso2 == d.key})[0]) {
        d.values.value = n.usd_2009
        d.values.value_current = n.usd_current
      }
      else {
        d.values.value = null
        d.values.value_current = null
      }


      country = d3.select("#states #"+d.key)
      color = d.values.value == null ? '#777' : c(d.values.value)
      country.transition()
          .duration(item_duration)
          .delay(i*item_delay)
          .attr('fill', color)

    })

    total_cdf_in_view = d3.sum(map_data, function(m) {return m.values.value})



    // 5. unfuzz and re-add listeners
    <% if Rails.env.development? %>
    console.log("5. unfuzz + listeners "+time_since(start) )
    <% end %>

    //unfuzz((item_delay * json.length)+(item_duration), item_duration)
    unfuzz((item_delay*map_data.length)+item_duration,item_duration)
  <% if Rails.env.development? %>
  console.log("End "+time_since(start))
  <% end %>

  })
}

function time_since(time) {
  return new Date - time
}
make_map_with_params({})

make_legend([100000000,500000000,10000000000,50000000000,100000000000,150000000000])

//                     ___....--- Click   //    //    //    // 
// ***---______...--***                  //    //    //    //

function click() {

  // get the country info
  activeIso = this.id
  activeName = $(this).attr("name")

 // these are all the records for the active country:
 activeCountryData = []

 if (d3.select(this).attr('fill')!='#777') {
  fuzz()

  // prep a g for the overlay
  overlay = vis.append('svg:g')
      .attr('id', 'overlay-wrapper')
      .attr('class', 'overlay')
  // drop down the gray sheet
  overlay.append('svg:rect')
    .attr("id", "grayBox")
    .attr('class', 'overlay')
    .attr("height", h)
    .attr("width", w)
    .attr("fill", "#000")
    .attr("opacity", 0)
    .on("click", removeOverlay)
  .transition()
    .duration(600)
    .attr("opacity", .6)
    ;
  }

  active_params.get='sector_name,year'
  active_params.recipient_iso2 = activeIso
  $.post("/aggregates/projects",
    active_params, function(json){
    delete active_params.recipient_iso2
    activeCountryData = json

if (activeCountryData.length == 0){
  removeOverlay()
  }
else {
    try_drawing_overlay()
  }
  }) 
}


function try_drawing_overlay() {

 // build year/sector data (for stack):
    // this is going to hold one array for each sector that is present
    stackLayers = []

    // get all the present sectors
    sectors = activeCountryData.map(function(d) {return d.sector_name}).getUnique()

    // you have to have an entry for each year -- arrays have to be same length
    sectors.forEach(function(sector) {
      sectorLayer = []
      // years is defined at the top -- range 2000 to 201x
      years.forEach(function(year) {
        pointData = activeCountryData.filter(function(d) {return d.year == year && d.sector_name == sector})
        point = {x: year, y: d3.sum(pointData, function(d) {return d.usd_2009})}
        sectorLayer.push(point)
      })
      stackLayers.push(sectorLayer)
    })

 yearSectorStack = d3.layout.stack()
  (stackLayers)

 // build sum data (for labels):
 sectorSums = d3.nest() 
  .key(function(d){return d.sector_name})
  .rollup(function(data) { return { "value" : d3.sum(data, function(d) {return d.usd_2009}), "count" : d3.sum(data, function(d) {return d ? 1 : 0 })}})
  .entries(activeCountryData)

 // build percent of total cdf data (for pie):
 percent_of_total = Math.round(((map_data.filter(function(d) {return d.key == activeIso }))[0].values.value/total_cdf_in_view)*1000)/10



  // use the data to build scales
  annual_amounts = []
  yearSectorStack[0].forEach(function(d,i) {
    annual_amount = 0
    yearSectorStack.forEach(function(e) {
      annual_amount += e[i].y
    })
    annual_amounts.push(annual_amount)
  })

    // in $5mil increments, and if less than $1mil, $1mil is the max
  annual_maximum = Math.max(Math.round(d3.max(annual_amounts)/5000000)*5000000, 10000000)



  var sector_area_h = 370
    sector_area_w = 370
    sector_area_y = d3.scale.pow().domain([0,annual_maximum]).range([sector_area_h, 0])
    sector_area_x = d3.scale.linear().domain([d3.min(years), d3.max(years)]).range([0,sector_area_w])

  var sector_area = d3.svg.area()
    .x(function(d) {return sector_area_x(d.x)})
    .y0(function(d) {return sector_area_y(d.y0)})
    .y1(function(d) {return sector_area_y(d.y + d.y0)})
    .interpolate('monotone')

  var null_area = d3.svg.area()
    .x(function(d) {return sector_area_x(d.x)})
    .y0(sector_area_h)
    .y1(sector_area_h)
    .interpolate('monotone')


  // paint the header and labels
    // paint the header
     overlay.selectAll('#country_header')
        .data([activeName])
      .enter().append('svg:text')
        .attr("id", "country_header")
        .attr("class", "overlay")
        .attr("x",190)
        .attr("y", 100)
        .text(String)
        .attr("opacity", 0)
        .attr("fill", '#222')
        .attr("font", "Georgia")
        .attr("font-weight", "bold")
        .attr("font-size", "5em")
      .transition()
        .attr("opacity",1)
        .duration(500)
      .transition()
        .duration(500)
        .attr("fill", "#819014")
        ;
    // paint the labels


      // a scale for equally-spaced sector labels
        highest_label = 150
        lowest_label = h-50
        label_left_position = w - 300
        label_height = d3.scale.linear().domain([0,sectorSums.length]).range([highest_label, lowest_label])
        label_increment = d3.min([label_height(1) - label_height(0), 35])

      // make a g to hold them
      headers = overlay.append('svg:g')
        .attr('id', 'headers')
        .append("svg:foreignObject")
          .attr("height", label_increment * (sectorSums.length+2))
          .attr("width", 310)
          .attr("x", label_left_position-20)
          .attr("y", highest_label - 35)
          .append("xhtml:body")
            .attr('id', 'sectors_body')
            .style("padding-top", 0)
            .style("background-color", "transparent")
      // get the body content, then load it
      headers_html ="<div style='text-align:left;color:white;'><p style='font-size:1.4em;'><b>Sectors:</b><br><span style='font-size:12px'><i>Click to see projects</i></span></p></div>" 

      sectorSums.forEach(function(s) {
        headers_html += "<p style='font-size:14px;color:"+c_sector(s.key)+"'><a href='/projects?country_name="+activeName+"&sector_name="+s.key+"'><b>"+ s.key +"</b>:<br> -- $" +money(Math.round(s.values.value))+ "</a></p>"
      })

      // load the headers 
        headers.html(headers_html)

 // paint the area chart
  // hold it it a g
  area_chart = overlay.append('svg:g')
    .attr("id", "area_chart")
    .attr('transform', 'translate(100,200)')

  // paint the year labels
  xAxis = d3.svg.axis()
    .scale(sector_area_x)
    .orient('bottom')
    .tickFormat(d3.format("f")) 
  area_chart.append("svg:g")
    .attr('class', 'axis')
    .call(xAxis)
    .style('fill', '#ccc')
    .attr('transform', 'translate(0,'+(sector_area_h+2)+')')
    .attr("opacity", 0)


  // paint the amount labels
  yAxis = d3.svg.axis()
    .scale(sector_area_y)
    .orient('left')
  area_chart.append("svg:g")
    .attr('class', 'axis')
    .call(yAxis)
    .style('fill', '#ccc')
    .attr("opacity", 0)

  area_chart.selectAll('.axis')
    .transition()
      .delay(function(d,i) {return 50*i})
      .attr("opacity", 1)

  // paint the areas
    var sector_area_chart = 
      area_chart.selectAll('.sector_area')
          .data(yearSectorStack)
        .enter().append('path')
          .attr('class', 'sector_area overlay')
          .attr("id", function(d,i) {return "sectorPath"+i})
          .attr("fill", function(d, i) {return c_sector(sectorSums[i].key)})
          .attr("d", null_area)
        .transition()
          .duration(600)
          .attr('d', sector_area)


 // paint the pie chart
  // prep the data and function
    var pie = d3.layout.pie().sort(d3.ascending),
        pie_data = [100-percent_of_total, percent_of_total],
        pie_radius = 70,
        arc = d3.svg.arc().outerRadius(pie_radius)
          
          // tweenPie for pie chart
          function tweenPie(b) {
            b.innerRadius = 0;
            var i = d3.interpolate({startAngle: 0, endAngle: 0}, b);
            return function(t) {
              return arc(i(t));
            };
          }


  // hold it in a g 
  var pie_chart = overlay.append('svg:g')
      .data([pie_data])
    .attr("id", "pie_chart")
    .attr("width", pie_radius*2)
    .attr("height", pie_radius*2)
    .attr("transform", "translate(15,10)")

  // make a label
  pie_chart.append("text")
    .attr("y", (pie_radius*2)+16)
    .attr("text-anchor", "left")
    .attr("fill", "#819014")
    .style("font-weight", "bold")
    .style("font-size", 12)
    .text(activeName+": "+percent_of_total+"% of total")
  // put the arcs in their own gs
  var arcs = pie_chart.selectAll("g.arc")
    .data(pie)
  .enter().append("g")
    .attr("class", "arc")
    .attr("transform", "translate(" + pie_radius + "," + pie_radius + ")");

  // put paths in the gs and make them grow
  var paths = arcs.append("path")
    .attr("fill", function(d, i) { return i == 1 ? '#819014' : '#fff'}); //#FAEDD9

  paths.transition()
    .duration(1000)
    .attrTween("d", tweenPie);

// Drawing the line chart comparing CDF/GNI and ODA/GNI -- tough because requires ~current~ USD, not constant USD!
  // set the scene
     // Set the constants
   line_chart_height = 95
   line_chart_width = 280
   line_chart_offset_y = 640
   line_chart_offset_x = w - line_chart_width - 50
   line_text_margin = 33

   // put it all in a g
    line_chart=overlay.append('svg:g')
      .attr('id', 'line_chart')
      .attr('transform', 'translate('+line_chart_offset_x+', '+line_chart_offset_y+')') 
    // background darker
      line_chart.append('svg:rect')
        .attr('id', 'line_chart_background')
        .attr('x', -20)
        .attr('y', -20)
        .attr('height', 40)
        .attr('width', line_chart_width + 50)
        .attr('stroke', 'transparent')
        .style('fill', 'hsla(0, 0%, 10%, 0.5)')

  // request related data, then call a function to draw the line chart

  worldbank_root = "http://api.worldbank.org/countries/#{country_iso}/indicators/#{indicator_code}?per_page=50&date=1999:2012&format=json"
    worldbank_gni_url = worldbank_root.replace(/#\{country_iso\}/, activeIso).replace(/#{indicator_code}/, "NY.GNP.ATLS.CD")
    worldbank_dacoda_url = worldbank_root.replace(/#\{country_iso\}/, activeIso).replace(/#{indicator_code}/, "DT.ODA.ODAT.GN.ZS")
    d3.json('/ajax?url='+ encodeURIComponent(worldbank_gni_url), function(gni_data) {
      d3.json('/ajax?url='+encodeURIComponent(worldbank_dacoda_url), function(dacoda_gni_data) {
        d3.json('/aggregates/projects?get=year&recipient_iso2='+activeIso, function(cdf_data){
          create_line_graph(cdf_data, gni_data, dacoda_gni_data)
        })
      })
    })

// Set targets, get the top x projects, then call a function to paint them
  // set targets
    // Top projects box target
      top_projects_offset_x = 10
      top_projects_offset_y = 620
      top_projects_height = 170
      top_projects_width  = 400

      top_projects_group = overlay.append('svg:g')
        .attr('id', 'top_projects')
        .attr('transform', 'translate('+top_projects_offset_x+', '+top_projects_offset_y+')')
        .append('svg:foreignObject')
          .attr("id", "top_projects_body")
          .attr("height", 40)
          .attr("width", top_projects_width)
          .style("background-color", "hsla(319, 0%, 100%, 0.5)")
          .style("margin","0 0 0 0")
          .style("padding","5px 5px 5px 5px")
          .append("xhtml:body")
            .attr('height', 40)
            .style('background-color', 'transparent')
            .style('color', 'black')
            .html("<p><b>Loading top projects...</b></p>")


  top_projects_number = 5
  top_projects_path = '/projects.json?order_by=usd_2009&active_string=Active&max='+top_projects_number+'&recipient_iso2='+activeIso
  c_projects = d3.scale.linear().domain([0, ((top_projects_number-1)/2), top_projects_number-1]).range(['#2A5C0B', '#55760f','#808f12'])

  


  d3.json(top_projects_path, function(top_projects_data){
    plot_top_projects(top_projects_data)
    create_top_projects_box(top_projects_data, "top_projects_body", top_projects_height)

  })

<% if Rails.env.development? %> 
 // For development
 console.log(activeIso +", "+ activeName)
 console.log("activeCountryData:")
 console.log(activeCountryData)
 console.log("sectorSums:")
 console.log(sectorSums)
 console.log("yearSectorStack:")
 console.log(yearSectorStack)
 console.log("percent_of_total")
 console.log(percent_of_total)
 console.log("annual_maximum")
 console.log(annual_maximum)
 console.log("pie_data")
 console.log(pie_data)
<% end %>

}
//Make the top projects list
function create_top_projects_box(projects, target, height){
  <% if Rails.env.development? %>
  console.log("projects:")
  console.log(projects)
  <% end %>

  body_html = "<p><b>Top projects in "+activeName+":</b></p><ul>"
  projects.forEach(function(p, i) {
    body_html += "<li style='color:"+c_projects(i)+"'><p style='color:black'><a href='/projects/"+p.id+"'>"+p.title+"</a> ("+(p.year ? p.year : "<i>no year</i>")+"), $"+money(p.usd_2009)+"</li>"
  })
  body_html +="</ul>"

  foreign_object = d3.select('#'+target);

  foreign_object
    .transition()
      .attr('height', 0)

  foreign_object_jq = $('#'+target)
  foreign_object_jq.children().remove()
  foreign_object_jq.append('<xhtml:body>'+body_html+'</xhtml:body>')

  foreign_object
    .transition()
      .attr('height', height)



}

function plot_top_projects(projects) {
  sectors = sectorSums.map(function(s) {return s.key})
  console.log("projects for plotting:")
  console.log(projects)

  function point_stack_height(project) {
    // UH oh, what if there are 2 in the same year?
    stack_object = yearSectorStack[sectors.indexOf(project.sector_name)][project.year-d3.min(years)]
    return stack_object ? stack_object.y0 + stack_object.y : 0
  }

  project_points = area_chart.selectAll('.project_point')
      .data(projects)
    .enter().append('svg:circle')
      .attr('cx', function(d) {console.log(d); return sector_area_x(d.year)})
      .attr('cy', function(d) {return sector_area_y(point_stack_height(d))})
      .attr('r', 4)
      .attr('fill', function(d,i) {return c_projects(i)})
      .attr('stroke', function(d) {return c_sector(d.sector_name)})
      .attr('stroke-weight', 1)
      .append('title')
        .text(function(d) {return d.title})
}


// Make the line graph
function create_line_graph(cdf_data,gni_data, dacoda_gni_data){
// constants were set before function call!
    d3.select('#line_chart_background')
    .transition()
      .attr('height', line_chart_height + line_text_margin+25)


<% if Rails.env.development? %>
console.log("cdf, gni, and dacoda_gni data:")
 console.log(cdf_data)
 console.log(gni_data)
 console.log(dacoda_gni_data)
<% end %>

 // prep the data
    cdf_over_gni = []
    dacoda_over_gni = []

    years.forEach(function(d) {
      cdf_point = ((cdf_data.filter(function(c) {return c.year == d})[0]) || {usd_current: 0})
      gni_point = gni_data[1].filter(function(c) {return c.date == d})[0]
      dacoda_over_gni_point = dacoda_gni_data[1].filter(function(c) {return c.date == d})[0]

      if (cdf_point&&gni_point&&gni_point.value) {
        cdf_over_gni.push([d, 100*(cdf_point.usd_current/Number(gni_point.value))])
      }

      if (dacoda_over_gni_point&&dacoda_over_gni_point.value) {
       dacoda_over_gni.push([d, Number(dacoda_over_gni_point.value)])
      }

    })

    <% if Rails.env.development? %>
    console.log(cdf_over_gni)
    console.log(dacoda_over_gni)
    <% end %>
 


 annual_maximum_finance_over_gni = d3.max([d3.max(dacoda_over_gni, function(d) {return d[1]}), d3.max(cdf_over_gni, function(d) {return d[1]})])
 line_percent_scale = d3.scale.linear().domain([0,(annual_maximum_finance_over_gni + (annual_maximum_finance_over_gni/10))]).range([line_chart_height, 0])
 line_year_scale = d3.scale.linear().domain([d3.min(years), d3.max(years)]).range([0,line_chart_width])

  // paint the year labels
    line_xAxis = d3.svg.axis()
      .scale(line_year_scale)
      .orient('bottom')
      .ticks(6)
      .tickFormat(d3.format("f")) 
    line_chart.append("svg:g")
      .attr('class', 'axis')
      .call(line_xAxis)
      .style('fill', '#ccc')
      .attr('transform', 'translate(0,'+(line_chart_height+2)+')')
      .attr("opacity", 1)


  // paint the percent labels
    line_yAxis = d3.svg.axis()
      .scale(line_percent_scale)
      .ticks(4)
      .orient('right')
    line_chart.append("svg:g")
      .attr('class', 'axis')
      .call(line_yAxis)
      .style('fill', '#ccc')
      .attr('transform', 'translate('+line_chart_width+')')
      .attr("opacity", 1)
  // paint line labels
    cdf_over_gni_color = '#FF9696'
    dacoda_over_gni_color = '#ADE8FF'
    line_chart.append('svg:text')
      .text('Chinese Dev. Fin.')
      .style('fill', cdf_over_gni_color)
      .attr('text-anchor', 'bottom')
      .attr('x', 30)
      .attr('y', line_chart_height + line_text_margin)

    line_chart.append('svg:text')
      .text('DAC ODA')
      .style('fill', dacoda_over_gni_color)
      .attr('text-anchor', 'bottom')
      .attr('x', 150)
      .attr('y', line_chart_height + line_text_margin)

  // paint the heading
    line_chart.append('svg:text')
      .text("Finance/GNI")
      .style('fill', 'white')
      .attr('text-anchor', 'top')
      .attr('y', 0)
      .attr('x', (line_chart_width/2)-(this.length/2))
      .style('font-weight', 'bold')
      .style('text-decoration', 'underline')

  // paint sources
    line_chart.append('svg:foreignObject')
      .attr('x', -20)
      .attr('y', line_chart_height + line_text_margin +5)
      .attr('width', line_chart_width + 50)
      .attr('height', 25)
      .append('xhtml:body')
        .style('padding', '2px 2px 2px 2px')
        .style("background-color", "hsla(319, 0%, 100%, 0.5)")
        .style('text-align', 'center')
        .style('vertical-align', 'center')
        .html('<p style="color:#333;"><b>Sources:</b> <a href="'+worldbank_gni_url+'">GNI</a>, <a href="'+worldbank_dacoda_url+'">ODA/GNI</a></p>')

  // paint the lines
  gni_line = d3.svg.line()
    .x(function(d) { return line_year_scale(d[0]); })
    .y(function(d) { return line_percent_scale(d[1]); });

      gni_stroke_width = 3
      gni_lines = line_chart.append('svg:g')
          .attr('id', 'gni_lines')

      gni_lines.append('svg:path')
          .attr('class', 'gni_line')
          .attr('d',gni_line(cdf_over_gni))
          .style('stroke', cdf_over_gni_color)
          .style('fill', 'transparent')
          .attr('stroke-width', gni_stroke_width)

      gni_lines.append('svg:path')
          .attr('class', 'gni_line')
          .attr('d',gni_line(dacoda_over_gni))
          .style('stroke', dacoda_over_gni_color)
          .style('fill', 'transparent')
          .attr('stroke-width', gni_stroke_width)

}

// Remove overlay
function removeOverlay() {

  d3.selectAll('.overlay')
    .transition('opacity', 0)
    .delay(10)
    .duration(100)
    .remove()

    unfuzz(0, 100)
}
// Highlight + Unhighlight

function highlight() {
  d3.select(this)
  .transition()
    .attr("stroke", "#ddd")
}

function unhighlight() {
  d3.select(this)
  .transition()
    .attr("stroke",function() {return $(this).attr("name") ? "#333" : ""})
}


function fuzz() {
     d3.selectAll('.fuzz')
    .transition()
      .attr("filter", "url(#blur)");
}
function unfuzz (delay, duration) {
  <% if Rails.env.development? %>
  console.log("started unfuzzing "+time_since(start));
  console.log({delay: delay, duration: duration})
  <% end %>
      d3.selectAll('.fuzz')
     .transition()
      .delay(delay || 100)
      .duration(duration || 100)
      .attr("filter", "")
      .each("end", recolor_and_add_listeners)
}
function recolor_and_add_listeners() {
  country = d3.select(this);
  data_item = map_data_item(this.id)
  if (data_item && data_item.values.value > 0) {
    country
      .on("click", click)
      .on("mouseover", highlight)
      .on("mouseout", unhighlight)
      .style('cursor', 'pointer')
        .transition()
          .attr("fill",  c(data_item.values.value))

  }
  else {
  country
      .on("click", "")
      .on("mouseover", "")
      .on("mouseout", "")
      .style('cursor', '')
        .transition()
          .attr("fill",  "#777")
  }
  <% if Rails.env.development? %>
  data_item ? console.log("finished unfuzzing "+data_item.key+" "+time_since(start)) : null;
  <% end %>
}

Array.prototype.getUnique = function(){
   var u = {}, a = [];
   for(var i = 0, l = this.length; i < l; ++i){
      if(u.hasOwnProperty(this[i])) {
         continue;
      }
      a.push(this[i]);
      u[this[i]] = 1;
   }
   return a;
}


function make_legend(legendAmounts) {
//---------------------------  LEGEND  ----------------------------------
legend_bar_width = 18
legend_bar_margin = 2
min_bar_height = 60
bar_height_increment = 20
legend_font_size = 10
max_bar_height = min_bar_height + (bar_height_increment * (legendAmounts.length-1))
var legend = vis.append('g')
    .attr("id", "legend")
    .attr("transform", "translate(70,500)")
    .attr("class", 'fuzz')
var legendBars = legend.selectAll('rect')
    .data(legendAmounts)
  .enter().append('rect')
    .attr("x", function(d,i) {return ((i*(legend_bar_margin+legend_bar_width)))})
    .attr("y", function(d,i) {return (max_bar_height - (i*bar_height_increment))})
    .attr("width", legend_bar_width)
    .attr("height", function(d, i) {return (min_bar_height+(i*bar_height_increment))})
    .attr("fill", function (d) {return c(d)})
  ;
legend.selectAll('text')
  .data(legendAmounts)
.enter().append('text')
  .attr("y",function(d,i) {return (legend_font_size +(i*( legend_bar_margin+legend_bar_width)))})
  .attr("x", function(d,i) {return -1*(max_bar_height +min_bar_height - legend_bar_margin)})
  .attr("text-anchor", "start")
  .attr("font-size", legend_font_size)
  .attr("fill", "#333")
  .attr("transform",function(d,i) {return "rotate(-90)"})
  .text(function(d) {return "$" + money(d)})

legend.append("svg:foreignObject")
  .attr("height", "100")
  .attr("width", "300")
  .attr("y", max_bar_height+2)
  .append("xhtml:body")
    .style("background-color", "transparent")
    .html("<p style='color:black;'><b>Chinese Development Finance, 2000-2011<b><br><i>USD-2009</i> || <a style='color:#333;'href='/projects'>See the Data</a></p>")
}
</script>