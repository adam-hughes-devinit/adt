.row-fluid
	.span3
		%h3
			Select your fields:
		%p.muted
			These fields will columns in the dataset 
			%strong
				and 
			units of aggregation
		-# %p.btn.btn-primary{onclick: "$('#get_input option').prop('selected', 'selected');"}
			-# Select All
	.span3.well
		= label_tag "Data fields"
		= select_tag "get", options_for_select(valid_field_options, valid_field_options[0]), multiple: true, class: "aggregate_input", id: "get_input" 
	.span3
		%h3
			Handle multiple recipients:
		%p.muted
			Some projects have 
			%strong
				more than one
			recipient country.
		%p.muted
			Choose how to split financial amounts between those countries:
	.span3.well
		= label_tag "Handle Multiple Recipients:" 
		= select_tag "multiple_recipients", options_for_select(duplication_handler_options) , multiple: false, class: "aggregate_input", id: "multiple_recipients_input", onchange: "show_duplication_handler_hint()"
		%span#handler_hint.muted

%hr{style: "margin:0px 0px 5px 0px"}

.row-fluid
	.span8
		%h3
			Filter your dataset:
		%p.muted
			You can filter the data by selecting the values you want to include. Use 
			%strong
				Control
			or 
			%strong
				Shift
			to select multiple values.
	.span4
		%span.btn.btn-info{onclick: "$('.where_filter').val('');update_previews();"}
			Clear filters
.row-fluid
	- third = (where_filters.length/3).round
	%ul.span4.unstyled
		- where_filters[0..third].each do |wf|
			%li
				= label_tag wf[:sym].to_s, wf[:name] 
				= select_tag wf[:sym].to_s, options_for_select(wf[:options]), multiple: true, class: 'aggregate_input where_filter' 
	%ul.span4.unstyled
		- where_filters[third+1..(2*third)+1].each do |wf|
			%li
				= label_tag wf[:sym].to_s, wf[:name] 
				= select_tag wf[:sym].to_s, options_for_select(wf[:options]), multiple: true, class: 'aggregate_input where_filter' 
	%ul.span4.unstyled
		- where_filters[(2*third)+2..-1].each do |wf|
			%li
				= label_tag wf[:sym].to_s, wf[:name] 
				= select_tag wf[:sym].to_s, options_for_select(wf[:options]), multiple: true, class: 'aggregate_input where_filter' 


%hr{style: "margin:0px 0px 5px 0px"}

.row-fluid
	%h3
		%span.span2
			Download:
		%span.span5#api_download
			%small
				Make a selection to download your dataset.
		%span.span3#api_query_preview
		%small.span2
			%a{href: "/content/api_docs"}
				See the API docs &rarr;

.row-fluid
	.span12
		%h2
			Preview:
			%small#data_preview_note

		%table#data_preview.table.table-bordered
		



:javascript
	var handler_names = [#{duplication_handler_hints.map {|h| "['#{h[0]}' , '#{h[1].gsub(/'/, '"')}']"}.join(",").html_safe}]  
	var value_delimiter = "#{@value_delimiter}"
	
	function show_duplication_handler_hint() {
		if (current_hint =	handler_names.filter(function(h) {return h[0] == $('#multiple_recipients_input').val() })[0])
			{$("#handler_hint").text(current_hint[1])}
		}

	function build_api_params () {
		if ($('#get_input').val()) {
			get_values = $('#get_input').val().join(",") }
		else 
			{ get_values = [] }
		
		param_values = 		[
			{name: "get", value: get_values }, 
			{name: "multiple_recipients", value: $('#multiple_recipients_input').val() }
			]
		
		filter_values = []
		
		$('.where_filter').each(function(i,f) { if (f.value) {
						filter_values
							.push({ name: f.name.replace(/[\[\]]/g, ''), value: $(f).val()
							.join(value_delimiter)})						
						}}) 
		
		
		if (filter_values.length>0)
			{ filter_values.forEach(function(v) {param_values.push(v) }) }
		
		if ($('#wdi_input').val())
			{ 
				wdi_input = $('#wdi_input').val()
				if (wdi_input.constructor.name == "String")
					{ param_values.push( { name:"wdi", value : wdi_input }) }
				else if (wdi_input.constructor.name == "Array")
				 {param_values.push( { name:"wdi", value : wdi_input.join(value_delimiter) }) }
			}
				
		param_string=decodeURIComponent($.param(param_values)).replace(/\+\+/g, "+%2B") // for CA +SOE which is turned into CA++SOE without this.
		return  param_string
	}

	function load_data_preview() {
		$("#data_preview td").text("--")
		$("#data_preview_note").html("... Loading your preview ... ")
		api_call = build_api_params()
		$.get('/aggregates/projects?'+api_call, function(json) {
		//console.log(data)
		//json = $.parseJSON(data)

		length = json.length
		json = json.slice(0,8)
		
		table_html = "<thead>"
		for (key in json[0])
			{table_html += "<th>"+key+"</th>"}
		
		table_html += "</thead><tbody>"
		
		json.forEach(function(j) {
			table_html += "<tr>"
			for (key in j) 
				{table_html += "<td>"+j[key]+"</td>" }
			table_html += "</tr>"
		})
		table_html += "</tbody></table>"
		
		$("#data_preview").html(table_html)
		$("#data_preview_note").html("("+length+" rows in the full dataset)")
	})

	}
				
	function update_previews() {
			load_data_preview()
			api_call = build_api_params()
			$('#api_query_preview').html("<a target='_blank' href='/aggregates/projects?"+api_call+"'>"+
			"API Query "+ "</a>")
			$('#api_download').html("<a href='/aggregates/projects.csv?"+api_call+"'>Download your CSV.</a>")
		}

	$(function() {
		show_duplication_handler_hint()
		$('.aggregate_input').change(function() {update_previews()})
		
	})