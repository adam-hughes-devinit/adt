.row-fluid
	.span6
		%h3
			1) Select columns for your dataset:
		%p.muted
			These will be the 
			%strong
				columns
			in your dataset.
		%p.muted
			%strong
				Click
			to add or remove columns.

	.span6.well.well-small
		.container-fluid
			.row-fluid
				= label_tag "Fields in your data:"

			- valid_field_options.each_slice(3) do |slice|
				.row-fluid
					- slice.each do |option| 
						%span.span4.btn.aggregate_input.get_input{ "data-field-name" => option[1]}
							= option[0]

		-# = select_tag "get", options_for_select(valid_field_options, valid_field_options[0]), multiple: true, class: "aggregate_input", id: "get_input" 

%hr{style: "margin:0px 0px 5px 0px"}

.row-fluid
	.span6
		%h3
			2) Handle multiple recipients:
		%p.muted
			Some projects have 
			%strong
				more than one
			recipient country.
		%p.muted
			Choose how to split financial amounts between those countries:
	.span6.well
		= label_tag "Handle Multiple Recipients:" 
		= select_tag "multiple_recipients", options_for_select(duplication_handler_options) , multiple: false, class: "aggregate_input", id: "multiple_recipients_input", onchange: "show_duplication_handler_hint()"
		%span#handler_hint

%hr{style: "margin:0px 0px 5px 0px"}

.row-fluid
	.span8
		%h3
			3) Filter your dataset:
		%p.muted
			%strong
				Click
			the headings to filter. Use 
			%strong
				Control
			or 
			%strong
				Shift
			to select multiple values.
	.span4
		%span.btn.btn-info{onclick: "$('.where_filter').val('');update_previews();"}
			Clear filters
.row-fluid
	- third = (where_filters.length/3 + 0.5).round
	- where_filters.each_slice(third) do |slice|
		%ul.span4.unstyled
			- slice.each do |wf|
				= render partial: "aggregate_exporter_where_filter", locals: {where_filter: wf}


%hr{style: "margin:0px 0px 5px 0px"}

.row-fluid
	%h3
		%span.span4
			4) Download:
		%span.span4#api_download
			%small
				Make a selection to download your dataset.
		%span.span2#api_query_preview
		%small.span2
			%a{href: "/content/api_docs"}
				See the API docs &rarr;

.row-fluid
	.span12.well.well-small
		%h4
			Preview:
			%small#data_preview_note

		%table#data_preview.table.table-bordered{style: "background:white"}
		


= javascript_include_tag "d3/index"

:javascript
	var handler_names = [#{duplication_handler_hints.map {|h| "['#{h[0]}' , '#{h[1].gsub(/'/, '"')}']"}.join(",").html_safe}]  
	var value_delimiter = "#{@value_delimiter}"
	
	function show_duplication_handler_hint() {
		if (current_hint =	handler_names.filter(function(h) {return h[0] == $('#multiple_recipients_input').val() })[0])
			{$("#handler_hint").text(current_hint[1])}
		}

	function build_api_params () {
		get_values = $('.get_input.btn-success')
			.map(function(){return $(this).attr("data-field-name") }).get()
			//.join(",")
		if (get_values.length==0) {
			get_values = ['donor']
		}
		console.log(get_values)
		
		
		param_values = 		[
			{name: "get", value: get_values.join(",") }, 
			{name: "multiple_recipients", value: $('#multiple_recipients_input').val() }
			]
		
		filter_values = []
		
		$('.where_filter').each(function(i,f) { if (f.value) {
						filter_values
							.push({ name: f.name.replace(/[\[\]]/g, ''), value: $(f).val()
							.join(value_delimiter)})						
						}}) 
		
		
		if (filter_values.length>0)
			{ filter_values.forEach(function(v) {param_values.push(v.replace(/&/, "%26") ) }) } // For sao tome & principe
		
						
		param_string=decodeURIComponent($.param(param_values)).replace(/\+\+/g, "+%2B") // for CA +SOE which is turned into CA++SOE without this.

		
		return  param_string
	}

	function load_data_preview() {
		$("#data_preview td").text("--")
		$("#data_preview_note").html("... Loading your preview ... ")
		api_call = build_api_params()
		$.get('/aggregates/projects?'+api_call, function(json) {
		//console.log(data)
		//json = $.parseJSON(data)

		length = json.length
		json = json.slice(0,8)
		
		table_html = "<thead>"
		for (key in json[0])
			{table_html += "<th>"+key+"</th>"}
		
		table_html += "</thead><tbody>"
		
		json.forEach(function(j) {
			table_html += "<tr>"
			for (key in j) 
				{table_html += "<td>"+ ( (key == "usd_current" || key == "usd_2009") ?  d3.format(",2f")(j[key]) : j[key] )+"</td>" }
			table_html += "</tr>"
		})

		more_rows = length - 8
		if (more_rows > 0) {
			table_html += "<tr class='text-info'><td><strong>" + more_rows + " more rows in the dataset</strong><td><strong>...</strong></td><td><strong>...</strong></td></td><td><strong>...</strong></td></tr>" 
		}	
		table_html += "</tbody></table>"
		
		$("#data_preview").html(table_html)
		$("#data_preview_note").html("("+length+" rows in the full dataset)")
	})

	}
				
	function update_previews() {
			load_data_preview()
			api_call = build_api_params()
			$('#api_query_preview').html("<a target='_blank' href=\"/aggregates/projects?"+api_call+"\">"+
			"API Query "+ "</a>")
			$('#api_download').html("<a href=\"/aggregates/projects.csv?"+api_call+"\">Download your CSV</a>")
		}

	$(function() {
		show_duplication_handler_hint()
		$('[data-field-name="crs_sector_name"],[data-field-name="year"], [data-field-name="recipient_name"], [data-field-name="intent"]').addClass('btn-success')
		$('.get_input').click(function() {$(this).toggleClass("btn-success"); update_previews()})

		$('.aggregate_input').change(function() {update_previews()})
		update_previews()

		$('.where_filter').hide()
		$('.where_filter_heading').click(function(){
			$(this).siblings('.where_filter').toggle()
		})
		
	})