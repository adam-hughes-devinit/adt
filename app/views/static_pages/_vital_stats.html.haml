
#vitals

= javascript_include_tag 'underscore/index'
-# nice_money depends on d3:
= javascript_include_tag 'd3/index'


%script#vitals-template{ type: 'text/template'}
	.row-fluid
		.span12.alert.alert-info
			-#
			%h3.text-info
				Current Stats:
				%small.pull-right
					%i Hover to see all stats
			%ul.unstyled.marquee
				%li
					Chinese 
					%strong
						%a{href: "/projects?scope_names[]=Official Finance"}<>
							official finance projects 
						=":"
					%span.official#count.text-success
						<%= official.count %>
				%li
					Amounting to 
					%strong 
						%a{href: "/projects?scope_names[]=Official Finance"}<> 
							financial commitments
					of:
					%span.official#usd_2009.text-success
						$<%= nice_money(official.usd_2009) %>
					-# %small 
						-# (USD-2009)
				%li
					Financial value of all
					%strong
						%a{href: "/projects?&active_string=Active&oda_like_name=ODA-like"}<> 
							ODA-Like projects
						= ":"
					%span.oda_like#usd_2009.text-success
						$<%= nice_money(oda_like.usd_2009) %>
					-# %small
						-# (USD-2009)
				%li
					Projects 
					%strong 
						%a{href: "/projects?active_string=Active&status_name[]=Completion&status_name[]=Implementation"}<>
							implemented or completed
						= ":"
					%span.implemented_or_completed#percent.text-success
						<%= implemented_or_completed.percent %>%
				%li 
					Value of
					%strong 	
						%a{href: "/projects?active_string=Active&status_name[]=Completion&status_name[]=Implementation"}<
							implemented/completed 
					projects:
					%span.implemented_or_completed#usd_2009.text-success<
						$<%= nice_money(implemented_or_completed.usd_2009) %>
					-# %small
						-# (USD-2009)


:coffee
	@vitals = 
		official: 
			params:
				get: "donor"
				# only ACTIVE by default
				verified: "Checked"
				flow_class: [
					"ODA-like"
					"Official investment"
					"OOF-like"
					"Vague (Official Finance)"
					].join("*")
				status: [
					# Everything but suspended and cancelled
					"Completion"
					"Implementation"
					"Pipeline: Commitment"
					"Pipeline/identification"
					"Pipeline: Pledge"
					"Pipeline: Vague"
				].join("*")

		oda_like: 
			params:
				get: "donor"
				# only ACTIVE by default
				verified: "Checked"
				flow_class: [
					"ODA-like"
					].join("*")
				status: [
					# Everything but suspended and cancelled
					"Completion"
					"Implementation"
					"Pipeline: Commitment"
					"Pipeline/identification"
					"Pipeline: Pledge"
					"Pipeline: Vague"
				].join("*")

		implemented_or_completed:
			params:
				get: "donor"
				# only ACTIVE by default
				verified: "Checked"
				flow_class: [
					"ODA-like"
					"Official investment"
					"OOF-like"
					"Vague (Official Finance)"
					].join("*")
				status: [
					# Everything but suspended and cancelled
					"Completion"
					"Implementation"
				].join("*")

	returned_queries = 0


	$.get '/aggregates/projects', vitals.official.params, (data) ->
		this_set = vitals.official

		data = (d for d in data when d["donor"] is "CHN")[0]
		this_set.count = data["count"]
		this_set.usd_2009 = data["usd_2009"]

		returned_queries += 1
		fill_template_if_finished(vitals, returned_queries)

	$.get '/aggregates/projects', vitals.oda_like.params, (data) ->
		this_set = vitals.oda_like

		data = (d for d in data when d["donor"] is "CHN")[0]
		this_set.count = data["count"]
		this_set.usd_2009 = data["usd_2009"]

		returned_queries += 1
		fill_template_if_finished(vitals, returned_queries)

	$.get '/aggregates/projects', vitals.implemented_or_completed.params, (data) ->
		this_set = vitals.implemented_or_completed

		data = (d for d in data when d["donor"] is "CHN")[0]
		this_set.count = data["count"]
		this_set.usd_2009 = data["usd_2009"]

		returned_queries += 1
		fill_template_if_finished(vitals, returned_queries)

	fill_template_if_finished = (vitals, returned_queries) ->
		console.log returned_queries
		if returned_queries is 3
			vitals.implemented_or_completed.percent = Math.round((vitals.implemented_or_completed.count / vitals.official.count)*100)
			template = _.template($('#vitals-template').html(), vitals)
			

			$('#vitals').append(template)
			marquee.create('.marquee')

	@marquee =

		create: (selector) ->
			this.selector = selector
			this.step = 0
			this.length = $(selector+ ' li').length
			this.start()
			this.phase = this.period * .1

			m = this
			$(selector).parent()
				.mouseenter(marquee.reveal)
				.mouseleave(marquee.continue)

		hide_all: () ->
			$(this.selector + ' li').hide()
		show_all: () ->
			$(this.selector + ' li').show()

		stop: () ->
			marquee.state = 'stopped'
		

		period: 3000
		start: () ->		
			marquee.state = 'started'
			marquee.hide_all()
			$(marquee.selector + ' li:eq(' + marquee.step + ')').fadeIn(marquee.phase, () ->
				marquee.cycling = setInterval(marquee.increment, marquee.period)
			)	

		increment: () ->	
			m = marquee
			if m.state != 'stopped'
				step_from = m.step
				step_to = (step_from + 1) % (m.length)
				console.log("increment", step_from, step_to)
				$(m.selector+ ' li:eq(' + step_from + ')').fadeOut(marquee.phase, () ->
					$(m.selector+' li:eq(' + step_to + ')').fadeIn(marquee.phase)				
				)

				m.step = step_to

		continue: () ->
			marquee.hide_all()
			$(marquee.selector + ' li:eq(' + marquee.step + ')').show()
			marquee.state ='started'
		reveal: (m) ->
			marquee.stop()
			marquee.show_all()
			



