<h2> Build a Query: </h2>
<div class="accordion span11" id="accordion2">
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseOne">
        1) Select fields to retrieve/aggregate by:
      </a>
    </div>
    <div id="collapseOne" class="accordion-body collapse in">
      <div class="accordion-inner">
        		<%= select_tag "get", options_for_select(valid_field_options, valid_field_options[0]) , multiple: true, class: "aggregate_input span6", id: "get_input"  %>
		<br><br>
		<span style="color:#666">These fields are also the units of aggregation. Use Shift or Control to select multiple options</span>
      </div>
    </div>
  </div>  
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseTwo">
        2) Select filter values or preset scope:
      </a>
    </div>
    <div id="collapseTwo" class="accordion-body collapse">
      <div class="accordion-inner">
      	<div id="scopes" style='text-align:center'>
      		<p><b>Preset scopes:</b></p>
      		<button onclick="select_scope(this.id)" id='official_finance'>Official Finance</button>
      		<button onclick="select_scope(this.id)" id='unofficial_finance'>Unofficial Finance</button>
      		<button onclick="select_scope(this.id)" id='military'>Military</button>
      		<br><br>
      		<button onclick="select_scope(this.id)" id='none'>Clear All</button>
      	</div>
        <% where_filters.each do |wf| %>
  				<div class='span3'>
						<%= label_tag wf[:sym].to_s, wf[:name] %>
						<%= select_tag wf[:sym].to_s, options_for_select(wf[:options]), multiple: true, class: 'aggregate_input where_filter' %>
					</div>
  			<% end %>
      </div>
    </div>
  </div>
  <div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseThree">
        3) Select how to handle multiple recipients:
      </a>
    </div>
    <div id="collapseThree" class="accordion-body collapse">
      <div class="accordion-inner">
				<%= select_tag "multiple_recipients", options_for_select(duplication_handler_options) , multiple: false, class: "aggregate_input span6", id: "multiple_recipients_input", onchange: "show_duplication_handler_hint()"  %>
				<br><br>
				<span id="handler_hint" style="color:#777">Select an option to get info</span>
      </div>
    </div>
  </div>
  <% if current_user_is_aiddata %>
	<div class="accordion-group">
    <div class="accordion-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseFour">
        4) Merge an indicator from the World Bank WDIs
      </a>
    </div>
    <div id="collapseFour" class="accordion-body collapse">
      <div class="accordion-inner">
				<%= select_tag "wdi", options_for_select(wdi) , multiple: false, include_blank: true, class: "aggregate_input span6", id: "wdi_input", onchange: ""   %>
				<br><br>
				<span style="color:#666">You must select "Recipient ISO3" and "Year" in section 1 to merge in a WDI. It may take a few minutes to merge in data from the World Bank API.</span>
      </div>
    </div>
  </div>
  <% end %>
</div>

 	<hr style="width:75%">

<div class='row' style='text-align:center;'>
	  <div class='row'>

		<h2> Query preview: </h2>
		<p><tt><span id="api_query_preview" style="color:#777">Make a selection to see a preview.</span></tt>
		</p>
		<br>
		<h2> Data preview: </h2>
		<p>
			<table align='center' id="data_preview">
			</table>
			
			<br>
			<span id="data_preview_note" style="color:#777">Make a selection to see a preview.</span>
		</p>
		<br>
		<h2> Download your CSV: </h2>
		<p>
			<tt><span id="api_download"> Make a selection to get a download link.</span></tt>
		</p>
		
	</div>
		<hr style="width:75%">
</div>


<script>
var handler_names = [<%= duplication_handler_hints.map {|h| "['#{h[0]}' , '#{h[1].gsub(/'/, '"')}']"}.join(",").html_safe %> ]  
	
function show_duplication_handler_hint() {
	if (current_hint =	handler_names.filter(function(h) {return h[0] == $('#multiple_recipients_input').val() })[0])
		{$("#handler_hint").text(current_hint[1])}
	}

function build_api_params () {
		if ($('#get_input').val()) {
			get_values = $('#get_input').val().join(",") }
		else 
			{ get_values = [] }
		
		param_values = 		[
			{name: "get", value: get_values }, 
			{name: "multiple_recipients", value: $('#multiple_recipients_input').val() }
			]
		
		filter_values = []
		
		$('.where_filter').each(function(i,f) { if (f.value) {
						filter_values.push({ name: f.name.replace(/[\[\]]/g, ''), value: $(f).val().join("<%= @value_delimiter %>")})						
						}}) 
		
		
		if (filter_values.length>0)
			{ filter_values.forEach(function(v) {param_values.push(v) }) }
		
		if ($('#wdi_input').val())
			{ 
				wdi_input = $('#wdi_input').val()
				if (wdi_input.constructor.name == "String")
					{ param_values.push( { name:"wdi", value : wdi_input }) }
				else if (wdi_input.constructor.name == "Array")
				 {param_values.push( { name:"wdi", value : wdi_input.join("<%= @value_delimiter %>") }) }
			}
			
	param_string=decodeURIComponent($.param(param_values)).replace(/\+\+/g, "+%2B") // for CA +SOE which is turned into CA++SOE without this.
	return  param_string
}

function load_data_preview() {
	$("#data_preview td").text("--")
	$("#data_preview_note").html("... Loading your preview ... ")
	api_call = build_api_params()
	$.post('/aggregates/projects?'+api_call, function(json) {
	//console.log(data)
	//json = $.parseJSON(data)

	length = json.length
	json = json.slice(0,8)
	
	table_html = "<thead>"
	for (key in json[0])
		{table_html += "<th>"+key+"</th>"}
	
	table_html += "</thead><tbody>"
	
	json.forEach(function(j) {
		table_html += "<tr>"
		for (key in j) 
			{table_html += "<td>"+j[key]+"</td>" }
		table_html += "</tr>"
	})
	table_html += "</tbody></table>"
	
	$("#data_preview").html(table_html)
	$("#data_preview_note").html("("+length+" rows in the full dataset)")
})

}
	
function select_scope(scope) {

if (scope=='official_finance') {L
	$('#flow_class').val(["OOF-like", "ODA-like", "Vague (ODF)"])
	$('#verified').val("Checked")
	$("#status").val(["Pipeline/identification", "Implementation", "Completion"])
	}
else if (scope=='unofficial_finance') {
	$('#flow_class').val(["JV +Gov", "JV -Gov","CA +SOE", "CA -SOE", "FDI +Gov", "FDI -Gov", "NGO Aid", "Vague (Com)"])
	$('#verified').val("Checked")
	}
else if (scope=='military') {
	$('#flow_class').val("Military")
	$('#verified').val("Checked")
	}
else if (scope=='none') {
	$('#flow_class').val('')
  $('#verified').val('')
	$('#status').val('')
	$('#recipient_name').val('')
	$('#sector_name').val('')
	$('#flow_type').val('')
	$('#year').val('')
	$('#intent_name').val('')
	}
	
	update_previews()
}
			
function update_previews() {
		load_data_preview()
		api_call = build_api_params()
		$('#api_query_preview').html("<a target='_blank' href='/aggregates/projects?"+api_call+"'>/aggregates/projects?"+api_call + "</a>")
		$('#api_download').html("<a href='/aggregates/projects.csv?"+api_call+"'>Click here to download.</a>")
	}

$(function() {
	show_duplication_handler_hint()
	$('.aggregate_input').change(function() {update_previews()})
	
})
</script>

