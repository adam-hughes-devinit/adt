<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' />
<%= javascript_include_tag   "humanity_united/mapbox" %>
<%= javascript_include_tag   "humanity_united/jquery-ui-1.10.4.custom.min" %>
<%= javascript_include_tag   "humanity_united/leaflet.markercluster-src" %>
<%= javascript_include_tag   "humanity_united/geoLERN" %>
<%= stylesheet_link_tag "humanity_united/mapbox" %>
<%= stylesheet_link_tag "humanity_united/ui-lightness/jquery-ui-1.10.4.custom.min" %>
<%= stylesheet_link_tag "humanity_united/MarkerCluster.Default" %>
<style>
    .container {width:100% !important;padding:0px !important;}
    #vis { width:100%; height:100%; margin-right:auto; margin-left:auto;}
    #map { position:absolute; height:100%; width:100%; margin-right:auto;margin-left:auto; }
    #searchbar {width:40%;position:absolute;left:10px;opacity:0.9;padding-left:2px;}
    #searchbar .vissearch {width:100%;margin-bottom:0px !important;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:0px;}
    #searchbar form {position:relative; right:10px; margin-bottom: 1px;height:32px;}
    #left {float:left;width:25%;position:absolute;top:35px;left:2px;height: -webkit-calc(100% - 35px); height: -moz-calc(100% - 35px); height: -ms-calc(100% - 35px); height: -o-calc(100% - 35px); height: calc(100% - 35px);}
    #searchresults {float:left;position:absolute;height:auto;width:100%;background-color:#FFF;opacity:0.9;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;z-index:1;max-height: -webkit-calc(100% - 80px); max-height: -moz-calc(100% - 80px); max-height: -ms-calc(100% - 80px); max-height: -o-calc(100% - 80px);  max-height: calc(100% - 80px);overflow:scroll;}
    #filtercontrol ol, #filtercontrol ul {margin:0 0 10px 10px;}
    #filtercontrol {float:right;position:absolute;right:2px;top:3px;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;height:auto;width:25%;padding:1px;background-color:#FFF;opacity:0.9;overflow-y:scroll;max-height: -webkit-calc(100% - 30px); max-height: -moz-calc(100% - 175px); max-height: -ms-calc(100% - 175px); max-height: -o-calc(100% - 175px);  max-height: calc(100% - 175px);}
    h4 {margin-left:5px;float:left;}
    #searchresults #results, #resultcount, #resultRight{margin:0 10px 0 10px;}
    form.leaflet-control-layers-list{margin:0px !important;}
    .info {padding: 6px 8px;background: rgba(255,255,255,0.9);box-shadow: 0 0 15px rgba(0,0,0,0.2);}
    .info h4 {margin: 0 0 5px;color: #777;}
    .legend i {width: 18px;height: 18px;float: left; margin-right: 8px;opacity: 0.7;}
    .leaflet-disabled{background-color:lightgrey;}
    .ui-widget{z-index:9997 !important;}
    img.loading{z-index:9999;display:none;position:absolute;top:50%;right:50%;}
    div.loading{z-index:9998;display:none;background-color:grey;position:absolute;opacity:0.4;height:100%;width:100%;overflow:hidden;}
    div.leaflet-control-zoom {left:0px !important;top:25px !important;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:0px !important;}
    div.leaflet-left {margin-left:25% !important}
    div.leaflet-control-layers {right:3px !important;top:1px !important;margin-top:2px !important;margin-right:25%;opacity:0.9;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:0px;}
    div.leaflet-right.leaflet-top {margin-right:25% !important;max-width: -webkit-calc(25% - 16px); max-width: -moz-calc(25% - 16px); max-width: -ms-calc(25% - 16px); max-width: -o-calc(25% - 16px);  max-width: calc(25% - 16px);height: -webkit-calc(100% - 35px); height: -moz-calc(100% - 35px); height: -ms-calc(100% - 35px); height: -o-calc(100% - 35px); height: calc(100% - 35px);}
    #watermark{position:absolute;bottom:0px;left:0px;z-index:0;}
    div.leaflet-popup-content-wrapper{box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:5px;opacity:0.9;}
    div.leaflet-popup-content{opacity:0.9;}
    div.leaflet-popup-tip-container{width:44px;height:25px;}
    div.leaflet-popup-tip{box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:20px;opacity:0.9;height:10px;width:30px;}
    #page_select{text-align:center;margin-left:auto;margin-right:auto;}
    #page{text-align:center;margin-left:auto;margin-right:auto;}
    .btn{opacity:0.9;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:0px;position:relative;top:-32px;left:100%;width:25% !important;}
    .project{cursor:pointer;}
    hr{margin:5px !important;}
    #resultsBtn, #filterBtn{text-align:center;cursor:pointer;background-image:url(/assets/humanity_united/icons-000000.png);background-position:0 -52px;background-repeat:no-repeat;width:26px;height:26px;float:right;}
    .plus{background-position:0px 0px !important;}
    .leaflet-control-layers-expanded{padding:5px !important;max-width:100%;max-height:100%;overflow:hidden;}
    #layerBtn{position:absolute;right:0;cursor:pointer;background-image:url(/assets/humanity_united/icons-000000.png);background-position:0px -54px;background-repeat:no-repeat;width:26px;height:28px;}
    .layerCollapse{background-position:0px -104px !important;position:relative !important;float:right;}
    .expanded{overflow:scroll;}
    div.leaflet-control-layers-base{float:left;}
    .header{width:100%;float:left;}
    .leaflet-bar a{border-radius:0px !important;}
    #resultLeft{overflow:hidden;position:relative;left:0;}
    #resultRight{overflow:hidden;position:relative;left:100%;display:none;}
    .geocode-cluster{background: #9FE5F8;background:rgba(159, 229, 248, 0.5);border:1px solid black;border:1px solid rgba(0, 0, 0, 0.5);border-radius:50%;}
    .geocode-cluster div{text-align:center;line-height:0%;position:relative;top:50%;}
    .suggestion-cluster{background: #a79ff8;background:rgba(167, 159, 248, 0.5);border:1px solid black;border:1px solid rgba(0, 0, 0, 0.5);border-radius:50%;}
    .suggestion-cluster div{text-align:center;line-height:0%;position:relative;top:50%;}
    .highlight{background-color:lightgoldenrodyellow;}
    .rightclick-dropdown{padding:3px;background: #FFF;opacity:0.9;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;width:auto !important;height:auto !important;z-index:9999 !important;}
    .rightclick-dropdown div{width:205px !important;}
    .leaflet-cluster-anim .leaflet-marker-icon, .leaflet-cluster-anim .leaflet-marker-shadow {
        -webkit-transition: -webkit-transform 0.3s ease-out, opacity 0.3s ease-in;
        -moz-transition: -moz-transform 0.3s ease-out, opacity 0.3s ease-in;
        -o-transition: -o-transform 0.3s ease-out, opacity 0.3s ease-in;
        transition: transform 0.3s ease-out, opacity 0.3s ease-in;
    }
   input.post_comment, input.post_suggestion{margin-bottom:2px !important;}
   .crosshair{cursor:crosshair !important;}
   #post_comment textarea{resize:vertical;}
   .big{max-height:300% !important;max-width:300% !important;}
   a.block{display:block !important;}
</style>
<div class="loading"></div>
<div id="vis">
  <img class="loading" src='/assets/humanity_united/loading.gif' alt='loading'>
    <div id="searchbar" class="ui-widget">
      <%= form_tag "/queries/geospatial_search", id: "geospatial_search", method: :get, remote: true do %>
            <%= text_field_tag :search, params[:search], placeholder: 'Search for projects and locations by keyword...', class:'vissearch' %>
            <%= submit_tag "Search", name: nil, class: "btn btn-primary span2" %>
      <% end %>
    </div>
  <script>
//Get and Set Params functions
function getParams(){
    var paramArr = window.location.search.substr(1).split("&")[0]==""?[]:window.location.search.substr(1).split("&");
    var params = {};
    for(var i=0;i<paramArr.length;i++){
        var param=paramArr[i];params[param.split("=")[0]]=param.split("=")[1]
    };
    return params
};
function setParams(params){
    if(params===undefined){params={}}
    var i = 1,
            locationSearch = "",
            len = Object.keys(params).length;
    for(var param in params){
        if(i==1){locationSearch+="?"}
        locationSearch+=param
        locationSearch+="="
        locationSearch+=params[param]
        if(i<len){locationSearch+="&"}
        i+=1
    };
    window.history.pushState({},"", "/geospatial_dashboard"+locationSearch);
};

//AJAX loading screen
var toggleLoading = function(){$(".loading").toggle();$( "#search" ).autocomplete("close");};
//Reset some options for when new data is loaded
var resetMap = function(){
    //If Results page is currently on projects, slide toggle it
    if($('#resultSlider').css("display")=="none"){
        $('#resultSlider').slideToggle();
        $('#resultsBtn').toggleClass('plus');
    }
    if($('#resultLeft').css("display")=="none"){
        slideResults();
    }
    if(map.hasLayer(newComment)){map.removeLayer(newComment)}
    getLatLonEventsOff();
    //If facets are off, turn them all on
    $('.facet-controller.on').trigger('click')
};
var resetClusters = function(data){
    map.removeLayer(markers);
    drawClusters()
    drawResults(data)
    results = data
    if(results.bounds!=undefined && feature_collection.features.length>0){
        map.fitBounds(results.bounds)
    }else if(results.bounds!=undefined && feature_collection.features.length<=0){
        map.fitBounds(results.bounds)
        $('#resultcount').html("<strong style='line-height:28px;'>No search results.</strong><hr>")
    }else if(feature_collection.features.length>0){
        var bounds = markers.getBounds()
        zoomToFeature(bounds)
    }else{
        map.fitBounds([[52,68],[-42,-29]])
        $('#resultcount').html("<strong style='line-height:28px;'>No search results.</strong><hr>")
    }
};
//Callback for the search bar
$('#geospatial_search')
  .bind("ajax:beforeSend", toggleLoading)
  .bind("ajax:complete", toggleLoading)
  .bind("ajax:success",function(xhr,data,status){
      //Reset options
      resetMap();
      //Make data global
      feature_collection = data.features
      //Change static URL query and page
      var params = {"q":data.query,"p":data.current};
      setParams(params);
      //Reset Clusters with new data, zoom to it
      resetClusters(data);
});
//Autocomplete function
function get_keywords(request, response){
  var params = {keywords: request.term.split(/(?:\(.*?\))+/)[0]};
  $.get("/queries/json_completion", params, function(data){
      response(data); }, "json");
};
  </script>
    <div id='map'>
    </div>
    <div id="left">
      <div id="searchresults">
        <div class="header">
        <h4>Results</h4><div id="resultsBtn" onclick="$('#resultSlider').slideToggle();$('#resultsBtn').toggleClass('plus')"></div>
        </div>
          <div id="resultcount"></div>
       <div id="resultSlider">
        <div id="resultLeft">
        <div id="results"></div>
        <div id="page"><strong>Page _ of _</strong></div>
        <div id="page_select">&lt;first &lt;prev <a href='#'>next&gt; </a><a href='#'>last&gt;</a></div>
        </div>
        <div id="resultRight">
          <a href='#' onclick='backToResults();'>&lt;Back to results</a>
          <hr>
          <div id="projectPage">
          </div>
        </div>
       </div>
      </div>
      <%= javascript_tag "var results=#{@page.to_json}"%>
      <%= javascript_tag "var feature_collection=#{@page["features"].to_json}"%>
      <%= javascript_tag "var commentsData=#{@comments.to_json}"%>
      <script>
//Function to draw results in the panel
        drawResults = function(results){
            $('#resultcount').html("<strong>"+results.entries+" projects -</strong>")
            $('#resultcount').append("<br>with "+feature_collection.features.length+" geocodes:<hr>")
            $('#page strong').text("Page "+results.current+" of "+results.pages)
            $('#results').html("")
            var i = 0,
                    resultlen = results.data.length;
            for(i=0;i<resultlen;i++){
                var project = results.data[i],
                        geoCount = 0,
                        truncTitle = project.title.split(' ').length>5?project.title.split(' ').slice(0,6).join(' ')+'...':project.title;
                feature_collection.features.forEach(function(e){
                    geoCount += e.properties.project_id==project.id?1:0
                })
                $('#results').append("<div id='"+project.id+"' class='project' onmouseover='highlightProjectHover("+project.id+")' onmouseout='resetHighlightProjectHover("+project.id+")' onclick='clickHighlightProject("+project.id+")'>ID: <a target='_blank' href='/projects/"+ project.id + "'>"+project.id+"</a><br>"+truncTitle+"<br>Geocodes: "+geoCount+"/"+project.geocodes.length+"</div>")
                $('#results').append("<hr>")
            }
//Draw page buttons
            $('div#page_select').html("")
            if(results.current<=1){
                $('div#page_select').append("&lt;first &lt;prev ")
            }
            else{
                $('div#page_select').append("<a href='#' onclick='pageFirst()'>&lt;first</a> <a href='#' onclick='pagePrev()'>&lt;prev</a> ")
            }
            if(results.current>=results.pages){
                $('div#page_select').append("next&gt; last&gt;")
            }
            else{
                $('div#page_select').append("<a href='#' onclick='pageNext()'>next&gt; </a><a href='#' onclick='pageLast()'>last&gt;</a>")
            }
        }
//Functions to control page movement
        pageFirst = function(){
            //Keep query, set page
            var query = getParams().q==undefined?"":getParams().q
            var pageParams = {"q":query,"p":1};
            setParams(pageParams);
            var params = {"search":results.query, page:1};
            $('.loading').toggle()
            $.post("/queries/geospatial_search", params, function(data){
                results = data
                drawResults(results); }, "json")
                    .always(function(){$('.loading').toggle()});
        }
        pagePrev = function(){
            //Keep query, set page
            var query = getParams().q==undefined?"":getParams().q
            var pageParams = {"q":query,"p":results.current - 1};
            setParams(pageParams);
            var params = {"search":results.query, page: results.current - 1};
            $('.loading').toggle()
            $.post("/queries/geospatial_search", params, function(data){
                results = data
                drawResults(results); }, "json")
                    .always(function(){$('.loading').toggle()});
        }
        pageNext = function(){
            //Keep query, set page
            var query = getParams().q==undefined?"":getParams().q
            var pageParams = {"q":query,"p":results.current + 1};
            setParams(pageParams);
            var params = {"search":results.query, page: results.current + 1};
            $('.loading').toggle()
            $.post("/queries/geospatial_search", params, function(data){
                results = data
                drawResults(results); }, "json")
                    .always(function(){$('.loading').toggle()});
        }
        pageLast = function(){
            //Keep query, set page
            var query = getParams().q==undefined?"":getParams().q
            var pageParams = {"q":query,"p":results.pages};
            setParams(pageParams);
            var params = {"search":results.query, page: results.pages};
            $('.loading').toggle()
            $.post("/queries/geospatial_search", params, function(data){
                results = data
                drawResults(results); }, "json")
                    .always(function(){$('.loading').toggle()});
        }
        drawResults(results)
      </script>
    </div>
  <div id="filtercontrol">
    <div class="header"><h4>Filter</h4><div id="filterBtn" onclick="$('#filterSlider').slideToggle();$('#filterBtn').toggleClass('plus')"></div></div>
    <div id="filterSlider">
    <div id="project-facets">
      <div class="pull-left">
        <ol>
        </ol>
      </div>
    </div>
    </div>
  </div>
  <div id="watermark">
    <a href="/"><%= image_tag("open_adt_small.png", width: "300") %></a>
  </div>
</div>
<script>
//Classifiers for filters
    var filters = {
        year : {
            data: {
                1:"2012",
                2:"2011",
                3:"2010",
                4:"2009",
                5:"2008",
                6:"2007",
                7:"2006",
                8:"2005",
                9:"2004",
                10:"2003",
                11:"2002",
                12:"2001",
                13:"2000"
            },
            name: "Year",
            literal:true
        },
        intent : {
            data: {
            1: "Development",
            2: "Commercial",
            3: "Representational",
            4: "Mixed",
            5: "Mixed (Some Development)",
            6: "Mixed (No Development)",
            999: "Unset"
            },
            name: "Intent"
        },
        status : {
            data: {
                1: "Pipeline/identification",
                2: "Implementation",
                3: "Completion",
                4: "Cancelled",
                5: "Suspended",
                6: "Pipeline: Commitment",
                7: "Pipeline: Pledge",
                8: "Pipeline: Vague"
            },
            name: "Status"
        },
        sector : {
            data: {
            1: "Education",
            2: "Health",
            3: "Population Policies / Programmes and Reproductive Health",
            4: "Water Supply and Sanitation",
            5: "Government and Civil Society",
            6: "Other Social infrastructure and services",
            7: "Transport and Storage",
            8: "Communications",
            9: "Energy Generation and Supply",
            10: "Banking and Financial Services",
            11: "Business and Other Services",
            12: "Agriculture, Forestry and Fishing",
            13: "Industry, Mining, Construction",
            14: "Trade and Tourism",
            15: "General Environmental Protection",
            16: "Women in Development",
            17: "Other Multisector",
            18: "General Budget Support",
            19: "Developmental Food Aid/Food Security Assistance",
            20: "Non-food commodity assistance",
            21: "Action Relating to Debt",
            22: "Emergency Response",
            23: "Administrative Costs of Donors",
            24: "Support to Non-governmental Organizations (NGOs) and Government Organizations",
            25: "Unallocated / Unspecified"
            },
            name: "Sector"
        },
        flow_class : {
            data: {
            1: "Unset",
            2: "ODA-like",
            3: "OOF-like",
            5: "Vague (Official Finance)",
            13: "Vague (Com)",
            14: "Official Investment"
            },
            name: "Flow Class",
            //Marked literal because the marker properties will literally feature these values, instead of needing translation through the keys
            literal:true
        },
        flow_type: {
            data: {
                1: "Monetary Grant (excluding debt forgiveness)",
                2: "Loan (excluding debt rescheduling)",
                3: "Debt forgiveness",
                4: "Debt rescheduling",
                5: "Foreign direct investment",
                6: "Export credits",
                7: "Joint venture with recipient",
                8: "In-kind Grant (Goods or Services)",
                9: "Free-standing technical assistance",
                10: "Scholarships/training in the donor country",
                11: "Loan Guarantee",
                12: "Strategic/Supplier Credit",
                13: "Vague-TBD",
                14: "Grant (Vague)",
                16: "Grant",
                15: "Unspecified",
                999: "Unset"
            },
            name: "Flow Type"
        }
        };
//Function to update check-box count
  function update_check_counter_for(this_facet) {
    checked_boxes = $(".search_check."+this_facet+":checked")
    check_count = checked_boxes.length
    counter = $('.check_count.'+this_facet)
    counter_text = "("+check_count+")"
    counter.text(counter_text)
  };
//Draw checkboxes
  function slideParent(e){
      var varname = $(e).attr("id");
      $(e).parent().siblings('ul').slideToggle();
      $(e).parent().siblings('.facet-controller').toggleClass('block');
      return false;
  };
  function toggleAllFilters(e,onoff){
    var varname = $(e).attr("id");
    $(e).siblings('ul').find('input').prop('checked', onoff);
    update_check_counter_for(varname);
    if(onoff){
        filterObject[varname] = filterList[varname].slice(0);
        filterGeoJson(filterObject);
    }else{
        filterObject[varname] = [];
        filterGeoJson(filterObject);
    };
    return false;
  };
  var filterObject = {},
          filterList = {};
  for(var filter in filters){
      var plural = filter.substr(-1) == "s"? filter+"es":filter+"s",
              varname = "project_"+filter,
              plural_varname = "project_"+plural;
      filterObject[varname] = [];
      filterList[varname] = [];
      $('div#project-facets ol').append("<div class='search-facet' id='"+filter+"'></div>");
      $('div.search-facet#'+filter).append("<b class='facet-header' id='"+filter+"'></b>");
      $('b.facet-header#'+filter).append("<a href='#' id='"+varname+"' onclick='slideParent(this)'>"+filters[filter].name+"</a>");
      $('div.search-facet#'+filter).append("<span class='check_count "+varname+"'></span>");
      $('div.search-facet#'+filter).append("<a class='facet-controller on' id='"+varname+"' href='#' onclick='toggleAllFilters(this,true)' style='display:none;margin-left:32px;'>Select All</a>");
      $('div.search-facet#'+filter).append("<a class='facet-controller off' id='"+varname+"' href='#' onclick='toggleAllFilters(this,false)' style='display:none;margin-left:32px;'>Unselect All</a>");
      $('div.search-facet#'+filter).append("<ul id='"+filter+"filter' class='unstyled facet-list' style='display:none;'></ul>");
      for(var key in filters[filter].data){
          var value = filters[filter].data[key],
                  name=filters[filter].literal?value:key;
          filterObject[varname].push(name);
          filterList[varname].push(name);
          $('ul#'+filter+'filter').append("<li class='facet-list-item'><label class='checkbox'><input type='checkbox' checked='true' name='"+varname+"' value='"+name+"' class='search_check boolean "+varname+"'>"+value+"</label></li>");
      };
      update_check_counter_for(varname)
  };
  $('.facet-list-item').click(function() {
      this_facet = $(this).find('.search_check').attr("name").replace(/\[\]/g, '')
      update_check_counter_for(this_facet)
  });
//Filter function
  filteredLayers = L.featureGroup();
  function filterGeoJson(filterObject){
      if(filterObject===undefined){
      }else{
          markers.eachLayer(function(feature){
              var metaFilterBoolean = true;
              for(var filter in filterObject){
                  var values = filterObject[filter],
                          valueLen = values.length,
                          filterBoolean = false;
                  for(var i=0;i<valueLen;i++){
                      if(feature.properties[filter]==null){feature.properties[filter]=999}
                      filterBoolean = filterBoolean || feature.properties[filter] == values[i]
                  };
                  metaFilterBoolean = metaFilterBoolean && filterBoolean
              };
              if(!metaFilterBoolean){
                  filteredLayers.addLayer(feature)
                  markers.removeLayer(feature)
              };
          });
          filteredLayers.eachLayer(function(feature){
              var metaFilterBoolean = true;
              for(var filter in filterObject){
                  var values = filterObject[filter],
                          valueLen = values.length,
                          filterBoolean = false;
                  for(var i=0;i<valueLen;i++){
                      if(feature.properties[filter]==null){feature.properties[filter]=999}
                      filterBoolean = filterBoolean || feature.properties[filter] == values[i]
                  };
                  metaFilterBoolean = metaFilterBoolean && filterBoolean
              };
              if(metaFilterBoolean){
                  markers.addLayer(feature)
                  filteredLayers.removeLayer(feature)
              };
          });
      };
  };
//Event listener for checkbox change
  $("div#filtercontrol input[type='checkbox']").change(function(){
      var changedBox = this,
              attribute = $(changedBox).attr("name"),
              value = $(changedBox).attr("value"),
              onOff = $("input:checked[name="+attribute+"][value="+value+"]").length,
              index = filterObject[attribute].indexOf(value);
      if(onOff==1){
          if(index==-1){
              filterObject[attribute].push(value);
          }
      }
      else{
          if(index>-1){
              filterObject[attribute].splice(index,1);
          }
      }
      filterGeoJson(filterObject);
  });

//Set-up layers
    var LERN =  L.markerClusterGroup();
    for (var i = 0; i < LERNdata.features.length; i++) {
            var a = LERNdata.features[i];
            var marker = L.marker(new L.LatLng(a.geometry.coordinates[1], a.geometry.coordinates[0]));
            var catStr = "";
            for(var j = 0;j< a.properties.categories.length;j++){catStr+= a.properties.categories[j]+"; ";};
            var popupText = "<b>Title: </b>"+ a.properties.title+"<br><b>Date: </b>"+ new Date(Date.parse(a.properties.date)).toLocaleString()+"<br><b>Location: </b>"+ a.properties.geoname+"<br><b>Categories: </b>"+ catStr+"<br><br><b>Description: </b>"+ a.properties.description
            marker.bindPopup(popupText);
            LERN.addLayer(marker);
    };
    var MapQuest = L.tileLayer('http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg', {
                attribution: 'Tiles by <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
                subdomains: '1234',
                noWrap:true,
                zIndex:0
            }),
            MapQuestSat = L.tileLayer('http://otile{s}.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpeg', {
                attribution: 'Tiles by <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
                subdomains: '1234',
                noWrap:true,
                zIndex:0,
                maxZoom:11
            }),
            OSM = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
                noWrap:true,
                zIndex:0
            }),
            DGSat = L.tileLayer('http://{s}.tiles.mapbox.com/v3/brunosan.map-cyglrrfu/{z}/{x}/{y}.png', {
                attribution: 'Tiles by Mapbox Satellite and <a href="http://www.digitalglobe.com/">Digital Globe</a> &mdash; Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
                noWrap:true,
                zIndex:0,
                subdomains:'abc'
            }),
            poverty = L.mapbox.tileLayer('miranda-lv.di996bt9', {
                noWrap:true,
                opacity:0.7,
                zIndex:4
            }),
            acled = L.tileLayer('http://china-tilestache.aiddata.org/acled/{z}/{x}/{y}.png', {
                attribution: "Base layer data from <a href='http://www.acleddata.com/'>ACLED</a>",
                noWrap:true,
                opacity:0.7,
                zIndex:4
            }),
            wp = L.tileLayer('http://china-tilestache.aiddata.org/wp/{z}/{x}/{y}.png', {
                tms: true,
                attribution: "Base layer data from <a href='http://www.worldpop.org.uk/'>World Pop</a>",
                noWrap:true,
                opacity:0.7,
                zIndex:4
            }),
            usgs = L.tileLayer('http://china-tilestache.aiddata.org/usgs/{z}/{x}/{y}.png',{
                attribution: "Base layer data from <a href='http://tin.er.usgs.gov/mrds/'>USGS MRDS</a>",
                noWrap:true,
                zIndex:4
            }),
//Set-up map
            map = L.map('map', {
                maxBounds: [[180,180],[-180,-180]],
                center: [6.964039, 19.533678],
                zoom:3,
                minZoom:3,
                maxZoom:13,
                layers:MapQuest
            }),
            baseMaps ={
                "Map": MapQuest,
                "Satellite": DGSat,
                "Open Street Map": OSM
            },
//Set-up GeoJson
            MarkerOptions = {
            radius: 7,
            fillColor: "#9FE5F8",
            color: "#000",
            weight: 1,
            opacity: 1,
            fillOpacity: 0.5},
            suggestionOptions = {
            radius: 7,
            fillColor: "#a79ff8",
            color: "#000",
            weight: 1,
            opacity: 1,
            fillOpacity: 0.5};
//Set-up Leaflet Controls
    var layerControl = L.control.layers(baseMaps);
    layerControl.options.collapsed = false;
    layerControl.addTo(map);
    layerControl.collapse = function(){
        $('div.leaflet-control-layers-base').slideToggle()
        $('#layerBtn').toggleClass('layerCollapse')
        $('.leaflet-control-layers-expanded').toggleClass('expanded')
    };
function fullExtent(event){
    event.preventDefault();
    map.setZoom(3)
    map.fitBounds([[52,68],[-42,-29]])
    return false;
};
$('.leaflet-control-zoom').prepend("<a href='#' style='font-weight:bold;text-align:center;' onclick='fullExtent(event)'><span style='position:relative;top:3px;'>Full</span></a>");
$('.leaflet-control-layers-list').prepend("<div id='layerBtn' class='layerCollapse' onClick='layerControl.collapse()'></div>");
$('.leaflet-control-layers-base').toggle();
$('.leaflet-control-layers-base').append("<hr>");
$('.leaflet-control-layers-base').append("<label><input type='radio' checked='true' id='noBase'><span> No Overlay</span></label>");
$('.leaflet-control-layers-base').append("<label><input type='radio' id='povertyBase'><span> Poverty</span></label>");
$('.leaflet-control-layers-base').append("<label><input type='radio' id='popBase'><span> Population per sq. km</span></label>");
$('.leaflet-control-layers-base').append("<label><input type='radio' id='acledBase'><span> Armed Conflict</span></label>");
$('.leaflet-control-layers-base').append("<label><input type='radio' id='usgsBase'><span> Minerals and Mines</span></label>");
$('.leaflet-control-layers-base').append("<hr>");
$('.leaflet-control-layers-base').append("<label><input type='checkbox' checked='true' id='projectOverlay'><span> Project Geocodes</span></label>");
$('.leaflet-control-layers-base').append("<label><input type='checkbox' id='LERNOverlay'><span> LERN</span></label>");
$('.leaflet-control-layers-base').append("<label><input type='checkbox' id='commentOverlay'><span> Comments</span></label>");
$("#noBase").change(function(){
    var onOff = $("input#noBase:checked").length;
    if(onOff==1){
        $("input#povertyBase").prop('checked',false)
        $("input#popBase").prop('checked',false)
        $("input#acledBase").prop('checked',false)
        $("input#usgsBase").prop('checked',false)
        if(poverty._map!=null){map.removeLayer(poverty)}
        if(wp._map!=null){map.removeLayer(wp)}
        if(acled._map!=null){map.removeLayer(acled)}
        if(usgs._map!=null){map.removeLayer(usgs)}
        if (legend._map!=null){
            map.removeControl(legend);
        }
    }
});
$("#povertyBase").change(function(){
    var onOff = $("input#povertyBase:checked").length;
    if(onOff==1){
        $("input#noBase").prop('checked',false)
        $("input#popBase").prop('checked',false)
        $("input#acledBase").prop('checked',false)
        $("input#usgsBase").prop('checked',false)
        if(poverty._map==null){map.addLayer(poverty)}
        if(wp._map!=null){map.removeLayer(wp)}
        if(acled._map!=null){map.removeLayer(acled)}
        if(usgs._map!=null){map.removeLayer(usgs)}
        legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend'),
                    grades = [0, 20, 40, 60, 80],
                    labels = [],
                    from, to;
            for (var i = 0; i < grades.length; i++) {
                from = grades[i];
                to = grades[i + 1];
                labels.push(
                                '<i style="background:' + getColorPoverty(from) + '"></i> ' +
                                from + (to ? '&ndash;' + to + '%' : '%+'));
            }
            div.innerHTML = labels.join('<br>');
            return div;
        };
        if (legend._map!=null){
            map.removeControl(legend);
        }
        map.addControl(legend);
    }
});
$("#popBase").change(function(){
    var onOff = $("input#popBase:checked").length;
    if(onOff==1){
        $("input#noBase").prop('checked',false)
        $("input#povertyBase").prop('checked',false)
        $("input#acledBase").prop('checked',false)
        $("input#usgsBase").prop('checked',false)
        if(poverty._map!=null){map.removeLayer(poverty)}
        if(wp._map==null){map.addLayer(wp)}
        if(acled._map!=null){map.removeLayer(acled)}
        if(usgs._map!=null){map.removeLayer(usgs)}
        legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend'),
                    grades = [0, 30, 66, 102, 138, 174],
                    labels = [],
                    from, to;
            for (var i = 0; i < grades.length; i++) {
                from = grades[i];
                to = grades[i + 1];
                labels.push(
                                '<i style="background:' + getColorPop(from) + '"></i> ' +
                                from + (to ? '&ndash;' + to + '' : '+'));
            }
            div.innerHTML = labels.join('<br>');
            return div;
        };
        if (legend._map!=null){
            map.removeControl(legend);
        }
        map.addControl(legend);
    }
});
$("#acledBase").change(function(){
    var onOff = $("input#acledBase:checked").length;
    if(onOff==1){
        $("input#povertyBase").prop('checked',false)
        $("input#popBase").prop('checked',false)
        $("input#noBase").prop('checked',false)
        $("input#usgsBase").prop('checked',false)
        if(poverty._map!=null){map.removeLayer(poverty)}
        if(wp._map!=null){map.removeLayer(wp)}
        if(acled._map==null){map.addLayer(acled)}
        if(usgs._map!=null){map.removeLayer(usgs)}
        legend.onAdd = function(map){
            var div = L.DomUtil.create('div', 'info legend'),
                    grades = ["None", "Low", "Medium", "High"],
                    labels = [],
                    from, to;
            for (var i = 0; i < grades.length; i++) {
                from = grades[i];
                to = grades[i + 1];
                labels.push(
                                '<i style="background:' + getColorConflict(from) + '"></i> ' +
                                from + (to ? '&ndash;' + to : '+'));
            }
            div.innerHTML = labels.join('<br>');
            return div;
        }
        if (legend._map!=null){
            map.removeControl(legend);
        }
        map.addControl(legend);
    }
});
$("#usgsBase").change(function(){
    var onOff = $("input#usgsBase:checked").length;
    if(onOff==1){
        if(poverty._map!=null){map.removeLayer(poverty)}
        if(wp._map!=null){map.removeLayer(wp)}
        if(acled._map!=null){map.removeLayer(acled)}
        if(usgs._map==null){map.addLayer(usgs)}
        $("input#povertyBase").prop('checked',false)
        $("input#popBase").prop('checked',false)
        $("input#acledBase").prop('checked',false)
        $("input#noBase").prop('checked',false)
        legend.onAdd = function(map){
            var div = L.DomUtil.create('div', 'info legend')
            labels = [];
            labels.push('<i style="background:#A10202"></i>' + "Mine, past or present");
            labels.push('<i style="background:#ffffff;border:solid #02A102 2px;"></i>' + "Prospective mine");
            labels.push('<i style="background:#0202A1"></i>' + "Processing plant");
            labels.push('<i style="background:#ffffff;border:solid black 2px;"></i>' + "Unknown");
            div.innerHTML = labels.join('<br>');
            return div;
        }
        if (legend._map!=null){
            map.removeControl(legend);
        }
        map.addControl(legend);
    }
});
$("#projectOverlay").change(function(){
    var onOff = $("input#projectOverlay:checked").length;
    if(onOff==1){
        map.addLayer(markers)
    }else{
        map.removeLayer(markers)
    }
});
$("#LERNOverlay").change(function(){
    var onOff = $("input#LERNOverlay:checked").length;
    if(onOff==1){
        map.addLayer(LERN)
    }else{
        map.removeLayer(LERN)
    }
});
$("#commentOverlay").change(function(){
    var onOff = $("input#commentOverlay:checked").length;
    if(onOff==1){
        map.addLayer(comments)
    }else{
        map.removeLayer(comments)
    }
});
    function getColorPoverty(d) {
        return d > 79.9  ? '#FF0202' :
                        d > 59.9   ? '#FA5A5A' :
                        d > 39.9   ? '#F78282' :
                        d > 19.9   ? '#F5AAAA' :
                '#F6CECE';
    };
    function getColorPop(d) {
        return d >= 174  ? '#020280' :
                        d >= 138   ? '#026A4C' :
                        d >= 102   ? '#02D317' :
                        d >= 66   ? '#3FFF20' :
                        d >= 30   ? '#A8FF55' :
                '#FFFF80';
    };
    function getColorConflict(d) {
        return d == "High"  ? '#BD0228' :
                        d == "Medium"   ? '#F4582B' :
                        d == "Low"   ? '#FDB853' :
                '#FFFFB3';
    };
    var legend = L.control({position: 'bottomright'});
var highlightOptions = {
    radius: 20,
    fillColor: "#f1f89f",
    color: "#000",
    weight: 1,
    opacity: 0,
    fillOpacity: 1};
function highlightProjectHover(project){
    highlightGroup = L.featureGroup();
    markers.eachLayer(function(layer){
        if(layer.properties.project_id==project){
            var parentLayer = markers.getVisibleParent(layer)
            if(parentLayer !==null){
                var latlng = parentLayer._latlng
                highlightMarker = L.circleMarker(latlng,highlightOptions)
                highlightGroup.addLayer(highlightMarker)
            }else{
                highlightMarker = L.circleMarker(layer._latlng,highlightOptions)
                highlightGroup.addLayer(highlightMarker)
            }
        }
    })
    map.addLayer(highlightGroup)
    highlightGroup.bringToBack();
};
function resetHighlightProjectHover(project){
    map.removeLayer(highlightGroup)
};
function highlightGeocode(geocode){
    markers.eachLayer(function(layer){
        if(layer.properties.geo_code_id==geocode){
            markers.zoomToShowLayer(layer)
            layer.openPopup()
        }
    })
};
function clickHighlightProject(project) {
    var r = $.Deferred();
    var params = {'id': project};
    $('.loading').toggle()
    $.post("/queries/micro_project", params, function(data){
        microProjectData = data
        drawProject(microProjectData, r);}, "json")
            .always(function(){$('.loading').toggle()});
    return r;
};
function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};
function toggleGeocode(){$("#geocodeslider").slideToggle();$("#geocodeBtn").html($("#geocodeBtn").html()[0]=="S"?"Hide geocodes":"Show geocodes")};
function drawProject(microProjectData, r){
//Build Feature Collection
    var features = [],
            project = microProjectData[0].project;
    $('.facet-controller.on').trigger('click')
    oldFeatures = feature_collection.features;
    microProjectData.forEach(function(geocode){
        var featureObj = {};
        featureObj.type = "Feature"
        featureObj.geometry = {}
        featureObj.geometry.coordinates = [parseFloat(geocode.lon),parseFloat(geocode.lat)]
        featureObj.geometry.type = "Point"
        featureObj.properties = {}
        featureObj.properties.adm_code = geocode.adm_code
        featureObj.properties.adm_level = geocode.adm_level
        featureObj.properties.adm_name = geocode.adm_name
        featureObj.properties.geo_code_id = geocode.geo_code_id
        featureObj.properties.geo_name = geocode.geo_name
        featureObj.properties.location_type = geocode.location_type
        featureObj.properties.precision_code = geocode.precision_id
        featureObj.properties.project_flow_class = geocode.flow_class!=null?geocode.flow_class.name:999
        featureObj.properties.project_flow_type = geocode.flow_type!=null?geocode.flow_type.id:999
        featureObj.properties.project_id = geocode.project.id
        featureObj.properties.project_intent = geocode.intent!=null?geocode.intent.id:999
        featureObj.properties.project_sector = geocode.sector!=null?geocode.sector.id:999
        featureObj.properties.project_status = geocode.status!=null?geocode.status.id:999
        featureObj.properties.project_title = geocode.project.title
        featureObj.properties.project_year = geocode.project.year
        features.push(featureObj)
    })
    feature_collection.features = features
//Redraw map with clustering and zoom
    map.removeLayer(markers);
    drawClusters();
    if(Object.keys(markers._featureGroup._layers).length>0){
        var bounds = markers.getBounds()
        zoomToFeature(bounds)
    }else{
        map.fitBounds([[52,68],[-42,-29]])
    }
//Draw Project Page
    $('#projectPage').html("")
    $('#projectPage').append("<span style='text-decoration:underline;'>"+project.title+"</span><br><br>")
    $('#projectPage').append("<b>ID:</b> <a target='_blank' href='/projects/"+ project.id + "'>"+project.id+"</a><br>")
    $('#projectPage').append("<b>Year:</b> "+project.year+"<br>")
    for(var i=0;i<project.geopoliticals.length;i++){
        $('#projectPage').append("<b>Recipient:</b> "+project.geopoliticals[i].recipient.name+" - "+project.geopoliticals[i].percent+"%<br>")
    }
    $('#projectPage').append("<b>Amount (USD 2009):</b> $"+numberWithCommas(Math.ceil(project.usd_2009))+"<br>")
    $('#projectPage').append("<b>Status:</b> "+project.status_name+"<br>")
    $('#projectPage').append("<b>Flow Class:</b> "+project.oda_like_name+"<br>")
    $('#projectPage').append("<b>Sector:</b> "+project.crs_sector_name+"<br><hr>")
    $('#projectPage').append("<a id='geocodeBtn' href='#' onclick='toggleGeocode()'>Show geocodes</a>")
    $('#projectPage').append("<div id='geocodeslider' style='display:none;'></div>")
    for(var i=0;i<microProjectData.length;i++){
        var geocode = microProjectData[i],
                geoTreelen = geocode.geoTree===null?0:geocode.geoTree.length,
                geocodeHTML = "";
        geocodeHTML += ("<b>Geocode "+(i+1)+":</b> "+"<br>")
        for(var j=0;j<geoTreelen;j++){
            if(j==0){
                geocodeHTML += ("<span>"+geocode.geoTree[j]+"</span><br>")
            }else if(j==1){
                geocodeHTML += ("<span><img src='assets/humanity_united/arrow.gif'/>"+geocode.geoTree[j]+"</span><br>")
            }else{
                geocodeHTML += ("<span style='margin-left:13px'><img src='assets/humanity_united/arrow.gif'/>"+geocode.geoTree[j]+"</span><br>")
            }
        }
        geocodeHTML += ("<em>Geoname: </em>"+geocode.geo_name+"<br>")
        geocodeHTML += ("<em>Precision: </em>"+geocode.precision_id+"<br>")
        $('#geocodeslider').append("<div class='geocode' id='"+geocode.geo_code_id+"' onclick='highlightGeocode("+geocode.geo_code_id+")' style='cursor:pointer'>"+geocodeHTML+"</div>")
        if(i+1<microProjectData.length){
            $('#geocodeslider').append("<hr>")
        }
    }
    $('#projectPage').append("<hr>")
    $('#projectPage').append("<b>Comment</b>")
    $('#projectPage').append("<form onchange='validate(this)' accept-charset='UTF-8' action='/comments' data-remote='true' id='post_comment' method='post'><div style='margin:0;padding:0;display:inline'><input name='utf8' type='hidden' value='✓'><input name='definitely_came_from_web_form' type='hidden' value='true'><input name='[geometry]latitude' type='hidden'><input name='[geometry]longitude' type='hidden'><input name='[comment]geocode_id' type='hidden'><input name='[base64_media_item]content_type' type='hidden'><input name='[base64_media_item]original_filename' type='hidden'><input name='[base64_media_item]media_data' type='hidden'><input name='[comment]project_id' type='hidden' value='"+project.id+"'></div><input class='post_comment' name='[comment]name' required='true' placeholder='*Name' type='text' style='float:left;width:50%'><input class='post_comment' name='[comment]email' required='true' placeholder='*Email' type='text' style='float:left;width:50%'><input class='post_comment' name='latlng' onchange='mapLatLon()' placeholder='Lat, Long' type='text' style='float:left;width:66%;'><button type='button' onclick='getLatLon()' style='float:left;width:33%;padding:0px !important;line-height:1 !important;min-height:30px;position:relative;top:2px;'>Get from map</button><textarea rows=3 class='post_comment' name='comment[content]' required='true' placeholder='*Type your comment here...' style='float:left;width:100%;'></textarea><div style='height:36px;float:left;width:30%;line-height:36px;'><span style='font-weight:bold;vertical-align:middle;display:inline-block;line-height:1;'>Attach media:</span></div><input class='post_comment' name='[comment]media' id='commentmediaupload' type='file' accept='image/*,video/*' style='float:left;width:70%;'><input class='post_comment' style='float:left;width:6%;' type='checkbox' required='true' id='terms_and_conditions'><label style='float:left;width:60%;'>I accept the <a href='http://aiddata.org/disclaimer-and-license' target='_blank'>terms and conditions</a>.</label><button type='button' id='submit' disabled='disabled' style='float:right;width:33%;height:30px;' onclick='submitComment()'>Submit</button></form>")
//Event Listener for file change
    commentFiles = [];
    $("#post_comment input[type=file]").change(function(event) {
        commentFiles = [];
        $.each(event.target.files, function(index, file) {
            var reader = new FileReader();
            reader.onload = function(event) {
                object = {};
                object.filename = file.name;
                object.size = file.size;
                object.type = file.type;
                object.data = event.target.result;
                commentFiles.push(object);
            };
            reader.readAsDataURL(file);
        });
    });
//Event listener for ajax success
    $('form#post_comment')
            .bind("ajax:beforeSend", toggleLoading)
            .bind("ajax:success", function(){toggleLoading();window.alert("Thank you for submitting a comment.\n\nIf you opted to geo-tag your comment, it will appear on your map during your current session, but will not be visible to other users until it is approved by an AidData staff member.")})
            .bind("ajax:error", function(){toggleLoading();window.alert("Sorry, something went wrong. Please try again later.")})
//Slide Results Panel
    slideResults()
    r.resolve();
    return r;
};
function validate(e){
    var requiredInputs = $(e).find('[required=true]'),
            email = $(e).find("[placeholder='*Email']").val(),
            len = requiredInputs.length,
            $button = $(e).find('button#submit'),
            val = true;
    for(var i = 0;i<len;i++){
        var $input = $(requiredInputs[i])
        if($input.attr('type')=='checkbox'){
            val = val && $input.prop('checked')
        }else{
            val = val && $input.val().length>0
        }
    }
    if(val){
        $button.removeAttr("disabled")
    }else{
        $button.attr("disabled","disabled")
    }
};
newComment = L.geoJson();
function mapLatLon(){
    var latlng = $("form#post_comment input[name = 'latlng']").val().split(',');
    if(latlng.length==2){
        var lat=parseFloat(latlng[0]),
                lng = parseFloat(latlng[1]);
        if(typeof(lat)=="number" && typeof(lng)=="number" && lat>=-90 && lat<=90 && lng>=-180 && lng<=180) {
            $("input[name = '[geometry]latitude']").val(lat)
            $("input[name = '[geometry]longitude']").val(lng)
            $("input[name = '[comment]geocode_id']").val(undefined)
            if (map.hasLayer(newComment)) {
                map.removeLayer(newComment)
            }
            newComment = L.marker([lat, lng]).bindPopup(lat.toFixed(4) + ", " + lng.toFixed(4))
            map.panTo([lat,lng])
            newComment.addTo(map)
        }
    } else {
        if (map.hasLayer(newComment)) {
            map.removeLayer(newComment)
        }
        if(Object.keys(markers._featureGroup._layers).length>0){
            var bounds = markers.getBounds()
            zoomToFeature(bounds)
        }else{
            map.fitBounds([[52,68],[-42,-29]])
        }
    }
};
function getLatLonEventsOff(){
    $('#map').removeClass("crosshair")
    $('.leaflet-clickable').css('cursor','pointer')
    map.off('click',singleEventFunc)
    markers.off('click',singleGeocodeEventFunc)
    markers.off('clusterclick',clusterEventFunc)
    suggestions.off('click',singleEventFunc)
    suggestions.off('clusterclick',clusterEventFunc)
    comments.off('click',singleEventFunc)
    comments.off('clusterclick',clusterEventFunc)
};
singleEventFunc = function(e){
    var lat = e.latlng.lat,
            lng = e.latlng.lng;
    $("input[name = '[geometry]latitude']").val(lat)
    $("input[name = '[geometry]longitude']").val(lng)
    $("input[name = 'latlng']").val(lat.toFixed(4)+", "+lng.toFixed(4))
    $("input[name = '[comment]geocode_id']").removeAttr("value")
    if(map.hasLayer(newComment)){
        map.removeLayer(newComment)
    }
    newComment = L.marker([lat,lng]).bindPopup(lat.toFixed(4)+", "+lng.toFixed(4))
    newComment.addTo(map)
    getLatLonEventsOff()
};
singleGeocodeEventFunc = function(e){
    var lat = e.layer._latlng.lat,
            lng = e.layer._latlng.lng;
    $("input[name = '[geometry]latitude']").val(lat)
    $("input[name = '[geometry]longitude']").val(lng)
    $("input[name = 'latlng']").val(lat.toFixed(4)+", "+lng.toFixed(4))
    $("input[name = '[comment]geocode_id']").val(e.layer.properties.geo_code_id)
    if(map.hasLayer(newComment)){
        map.removeLayer(newComment)
    }
    newComment = L.marker([lat,lng]).bindPopup(lat.toFixed(4)+", "+lng.toFixed(4))
    newComment.addTo(map)
    getLatLonEventsOff()
};
clusterEventFunc = function(e){
    var clusterEvent = e;
    clusterEvent.latlng = map.mouseEventToLatLng(e.originalEvent)
    var lat = clusterEvent.latlng.lat,
            lng = clusterEvent.latlng.lng;
    $("input[name = '[geometry]latitude']").val(lat)
    $("input[name = '[geometry]longitude']").val(lng)
    $("input[name = 'latlng']").val(lat.toFixed(4)+", "+lng.toFixed(4))
    $("input[name = '[comment]geocode_id']").removeAttr("value")
    if(map.hasLayer(newComment)){
        map.removeLayer(newComment)
    }
    newComment = L.marker([lat,lng]).bindPopup(lat.toFixed(4)+", "+lng.toFixed(4))
    newComment.addTo(map)
    getLatLonEventsOff()
};
function getLatLon(){
    $('#map').addClass("crosshair")
    $('.leaflet-clickable').css('cursor','crosshair')
    map.on('click',singleEventFunc)
    markers.on('click',singleGeocodeEventFunc)
    markers.on('clusterclick',clusterEventFunc)
    suggestions.on('click',singleEventFunc)
    suggestions.on('clusterclick',clusterEventFunc)
    comments.on('click',singleEventFunc)
    comments.on('clusterclick',clusterEventFunc)
};
function slideResults(){
    var $lefty = $('#resultLeft'),
            $righty = $('#resultRight'),
            resulthtml =  $('#resultcount').text().length>12?"<b style='line-height:28px;'>Project Page</b><hr>":"<strong>"+results.entries+" projects -</strong><br>with "+feature_collection.features.length+" geocodes:<hr>";
    $lefty.slideToggle()
    $lefty.animate({left: parseInt($lefty.css('left'),10) == 0 ?-$lefty.outerWidth():0})
    $righty.slideToggle()
    $righty.animate({left: parseInt($righty.css('left'),10) == 0 ?$lefty.outerWidth():0})
    $('#resultcount').html(resulthtml)
};
function backToResults(){
    getLatLonEventsOff();
    $('.facet-controller.on').trigger('click')
    if(map.hasLayer(newComment)){map.removeLayer(newComment)}
    feature_collection.features = oldFeatures
    //Redraw map with clustering and zoom
    map.removeLayer(markers);
    drawClusters();
    if(Object.keys(markers._featureGroup._layers).length>0){
        var bounds = markers.getBounds()
        zoomToFeature(bounds)
    }else{
    map.fitBounds([[52,68],[-42,-29]])
    }
//Slide Results Panel
    slideResults()
};
function zoomToFeature(bounds){
    var extendPoint1 = new L.LatLng(bounds.getNorthEast().lat + 1, bounds.getNorthEast().lng + 1);
    var extendPoint2 = new L.LatLng(bounds.getNorthEast().lat - 1, bounds.getNorthEast().lng - 1);
    bounds.extend(extendPoint1);
    bounds.extend(extendPoint2);
    map.fitBounds(bounds,{maxZoom:9});
};
if (feature_collection === null){
    console.log("Feature collection error.")
    feature_collection = {};
    feature_collection.features=[];}
//Clustering
function drawClusters(){
    markers = L.markerClusterGroup({maxClusterRadius:40,spiderfyDistanceMultiplier:2, showCoverageOnHover:false, iconCreateFunction:function(cluster){
        var count = cluster.getChildCount()
        return new L.DivIcon({html:'<div><b>' + count + '</b></div>',className:"geocode-cluster",iconSize: L.point(Math.sqrt((count+8)*20),Math.sqrt((count+8)*20))})
    }});
    for (var i = 0; i < feature_collection.features.length; i++) {
        var a = feature_collection.features[i],
                properties = feature_collection.features[i].properties;
        var marker = L.circleMarker(new L.LatLng(a.geometry.coordinates[1], a.geometry.coordinates[0]),MarkerOptions,{properties: properties});
        marker.bindPopup("<strong>Project ID: </strong><a target='_blank' href='/projects/"+ properties.project_id + "'>"+properties.project_id+"</a>"+"<br/><strong>Title: </strong>" + properties.project_title +"<br/><strong>Year: </strong>" + properties.project_year + "<br/><strong>Location: </strong>" + properties.geo_name + "<br/><strong>Precision: </strong>" + properties.precision_code);
        marker.properties = properties;
        markers.addLayer(marker);
    }
    if($("input#projectOverlay:checked").length==1){map.addLayer(markers);}
    markers.on('mouseover',highlightProjectDiv)
    markers.on('mouseout',highlightProjectDiv)
    markers.on('contextmenu',openRightClickMarkers)
    markers.on('clustercontextmenu', openRightClickCluster)
};
function setRadiusByZoom(){
    map.removeLayer(markers);
    var clusterRadius = map.getZoom()>5?1:40,
    markerArr = [];
    markers.eachLayer(function(e){markerArr.push(e)})
    markers = L.markerClusterGroup({maxClusterRadius:clusterRadius,spiderfyDistanceMultiplier:2, showCoverageOnHover:false, iconCreateFunction:function(cluster){
        var count = cluster.getChildCount()
        return new L.DivIcon({html:'<div><b>' + count + '</b></div>',className:"geocode-cluster",iconSize: L.point(Math.sqrt((count+8)*20),Math.sqrt((count+8)*20))})
    }});
    for (var i = 0; i < markerArr.length; i++) {
        markers.addLayer(markerArr[i])
    }
    if($("input#projectOverlay:checked").length==1){map.addLayer(markers);}
    markers.on('mouseover',highlightProjectDiv)
    markers.on('mouseout',highlightProjectDiv)
    markers.on('contextmenu',openRightClickMarkers)
    markers.on('clustercontextmenu', openRightClickCluster)
};
function highlightProjectDiv(e){
    var project = e.layer.properties.project_id,
            geocode = e.layer.properties.geo_code_id;
    $('div.project#'+project).toggleClass('highlight')
    $('div.geocode#'+geocode).toggleClass('highlight')
};
drawClusters();
//Map Event listeners
comments = L.markerClusterGroup({showCoverageOnHover:false});
for(var i = 0;i<commentsData.length;i++){
    var content=commentsData[i].content,
            name = commentsData[i].name,
            project_id = commentsData[i].project_id,
            latlng = commentsData[i].geom.substr(27,commentsData[i].geom.length-29).split(" ").reverse();
            media = commentsData[i].media;
    var marker = new L.marker(latlng);
    if(media==undefined){
        marker.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br>-" + name)
    }else if(media.media_content_type.substr(0,5)=="video"){
        if(media.media_content_type=="video/mp4"){
            var video = "<video width='280' height='210' controls><source type='"+media.media_content_type+"' src='"+media.media_url+"'></video>";
        }else if(media.media_content_type=="video/webm"){
            var video = "<video width='280' height='210' controls><source type='"+media.media_content_type+"' src='"+media.media_url+"'></video>";
        }else if(window.navigator.userAgent.indexOf("Mobile")==-1) {
            var video = "<a href='"+media.media_url+"'>Download video.</a>";
        }else{
            var video = "<b>Videos are disabled on mobile platforms. Please revisit this comment on a desktop computer to view the attached media.</b>";
        };
        marker.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br>"+video+"<br>-" + name)
    }else if(media.media_content_type.substr(0,5)=="image"){
        marker.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br><img class='constrained' src='"+media.media_url+"' style='cursor:pointer;max-width:100%;max-height:100%;' onclick='enlarge(this)'/><br>-" + name)
    }else{
        marker.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br>-" + name)
    }
    comments.addLayer(marker)
};
suggestions = L.markerClusterGroup({maxClusterRadius:40,spiderfyDistanceMultiplier:2, showCoverageOnHover:false, iconCreateFunction:function(cluster){
    var count = cluster.getChildCount()
    return new L.DivIcon({html:'<div><b>' + count + '</b></div>',className:"suggestion-cluster",iconSize: L.point(Math.sqrt((count+8)*20),Math.sqrt((count+8)*20))})
}});
map.on('contextmenu',openRightClickMap)
comments.on('contextmenu', openRightClickCluster)
suggestions.on('contextmenu', openRightClickMap)
comments.on('clustercontextmenu', openRightClickCluster)
suggestions.on('clustercontextmenu', openRightClickCluster)
newSuggestion = L.circleMarker();
function openRightClickMap(e){
    var dropdownIcon = new L.DivIcon({html:"<div class='rightClick' id='zoom'>Zoom to this location</div><div class='rightClick' id='suggest'>Suggest a new project at this location</div>",className:"rightclick-dropdown"});
    dropdown = L.marker(e.latlng,{icon:dropdownIcon})
    map.eachLayer(function(e){
        if(e._icon!=null){
            if(e._icon.className.indexOf("rightclick")!=-1){
                map.removeLayer(e)
            }
        }
    })
    dropdown.addTo(map);
    $('div.rightclick-dropdown').mouseleave(function(){
        map.removeLayer(dropdown);
    });
    $('div.rightClick#zoom').hover(function(){
        $('div.rightClick#zoom').toggleClass('highlight')
    });
    $('div.rightClick#zoom').mousedown(function(){
        map.removeLayer(dropdown);
        map.setView(e.latlng,13);
    });
    $('div.rightClick#suggest').hover(function(){
        $('div.rightClick#suggest').toggleClass('highlight')
    });
    $('div.rightClick#suggest').mousedown(function(){
        newSuggestion.closePopup();
        map.removeLayer(dropdown);
        newSuggestion = L.circleMarker(e.latlng,suggestionOptions);
        newSuggestion.bindPopup("<form onchange='validate(this)' style='width:200px;height:185px;' accept-charset='UTF-8' action='/projects/suggest' data-remote='true' id='post_suggestion' method='post'><div style='margin:0;padding:0;display:inline'><input name='suggest' type='hidden' value='true'><input name='utf8' type='hidden' value='✓'><input name='[geometry]latitude' type='hidden' value='"+ e.latlng.lat+"'><input name='[geometry]longitude' type='hidden' value='"+ e.latlng.lng+"'><input name='filename' type='hidden'><input name='[base64_media_item]media_data' type='hidden'><input name='[base64_media_item]content_type' type='hidden'><input name='[base64_media_item]original_filename' type='hidden'></div><input type='text' class='post_suggestion' name='project[title]' required='true' placeholder='*Suggest a project title' style='float:left;width:100%;'><input class='post_suggestion' name='project[user_suggestion_email]' placeholder='*Email' required='true' type='text' style='float:left;width:100%'><input class='post_suggestion' name='project[sources_attributes][][url]' required='true' placeholder='*Source URL' type='text' style='float:left;width:100%;'><div style='height:36px;float:left;width:30%;line-height:36px;'><span style='font-weight:bold;vertical-align:middle;display:inline-block;line-height:1;'>Attach media:</span></div><input class='post_suggestion' name='media' id='suggestionmediaupload' type='file' accept='image/*,video/*' style='float:left;width:70%;'><input class='post_suggestion' style='float:left;width:10%;' type='checkbox' required='true' id='terms_and_conditions'><label style='float:left;width:90%;'>I accept the <a href='http://aiddata.org/disclaimer-and-license' target='_blank'>terms and conditions</a>.</label><button type='button' style='width:50%;float:left;' id='submit' disabled='disabled' onclick='submitSuggestion()'>Submit</button><button type='button' style='width:50%;float:left;' onclick='cancelSuggestion()'>Cancel</button></form>")
        newSuggestion.addTo(map)
        newSuggestion.once('popupclose',cancelSuggestion)
        newSuggestion.openPopup()
        //Event Listener for file change
        suggestionFiles = [];
        $("#post_suggestion input[type=file]").change(function(event) {
            suggestionFiles = [];
            $.each(event.target.files, function(index, file) {
                var reader = new FileReader();
                reader.onload = function(event) {
                    object = {};
                    object.filename = file.name;
                    object.size = file.size;
                    object.type = file.type;
                    object.data = event.target.result;
                    suggestionFiles.push(object);
                };
                reader.readAsDataURL(file);
            });
        });
        //Event listener for ajax success
        $('form#post_suggestion')
                .bind("ajax:beforeSend", toggleLoading)
                .bind("ajax:success", function(){toggleLoading();window.alert("Thank you for suggesting a project.\n\nYour project will appear on your map during your current session, but will not be visible to other users until it is approved by an AidData staff member.")})
                .bind("ajax:error", function(){toggleLoading();window.alert("Sorry, something went wrong. Please try again later.")})
    });
};
function openRightClickMarkers(e){
    var dropdownIcon = new L.DivIcon({html:"<div class='rightClick' id='zoom'>Zoom to this geocode</div><div class='rightClick' id='project'>View project page</div><div class='rightClick' id='commentGeocode'>Comment on this geocode</div><div class='rightClick' style='display:none;' id='commentGeocodeProject'>Comment on this geocode</div><div class='rightClick' id='suggest'>Suggest a new project at this location</div>",className:"rightclick-dropdown"});
    dropdown = L.marker(e.latlng,{icon:dropdownIcon})
    dropdown.addTo(map);
    if($('#resultLeft').css("display")=="none"){
        $('div.rightClick#project').hide()
        $('div.rightClick#commentGeocode').hide()
        $('div.rightClick#commentGeocodeProject').show()
    }
    $('div.rightclick-dropdown').mouseleave(function(){
        map.removeLayer(dropdown);
    });
    $('div.rightClick#zoom').hover(function(){
        $('div.rightClick#zoom').toggleClass('highlight')
    });
    $('div.rightClick#zoom').mousedown(function(){
        map.removeLayer(dropdown);
        map.fitBounds(e.layer.getBounds());
    });
    $('div.rightClick#project').hover(function(){
        $('div.rightClick#project').toggleClass('highlight')
    });
    $('div.rightClick#project').mousedown(function(){
        map.removeLayer(dropdown);
        if($('#resultSlider').css("display")=="none"){
            $('#resultSlider').slideToggle();
            $('#resultsBtn').toggleClass('plus');
        }
        clickHighlightProject(e.layer.properties.project_id);
    });
    $('div.rightClick#commentGeocode').hover(function(){
        $('div.rightClick#commentGeocode').toggleClass('highlight')
    });
    $('div.rightClick#commentGeocode').mousedown(function(){
        map.removeLayer(dropdown);
        clickHighlightProject(e.layer.properties.project_id).done(
                function(){
                    var lat = e.layer._latlng.lat,
                            lng = e.layer._latlng.lng;
                    $("form#post_comment input[name = '[geometry]latitude']").val(lat)
                    $("form#post_comment input[name = '[geometry]longitude']").val(lng)
                    $("form#post_comment input[name = 'latlng']").val(lat.toFixed(4)+", "+lng.toFixed(4))
                    $("form#post_comment input[name = '[comment]geocode_id']").val(e.layer.properties.geo_code_id)
                    if(map.hasLayer(newComment)){
                        map.removeLayer(newComment)
                    }
                    newComment = L.marker([lat,lng]).bindPopup(lat.toFixed(4)+", "+lng.toFixed(4))
                    newComment.addTo(map)
                }
        );
    });
    $('div.rightClick#commentGeocodeProject').hover(function(){
        $('div.rightClick#commentGeocodeProject').toggleClass('highlight')
    });
    $('div.rightClick#commentGeocodeProject').mousedown(function(){
        map.removeLayer(dropdown);
        var lat = e.layer._latlng.lat,
                lng = e.layer._latlng.lng;
        $("form#post_comment input[name = '[geometry]latitude']").val(lat)
        $("form#post_comment input[name = '[geometry]longitude']").val(lng)
        $("form#post_comment input[name = 'latlng']").val(lat.toFixed(4)+", "+lng.toFixed(4))
        $("form#post_comment input[name = '[comment]geocode_id']").val(e.layer.properties.geo_code_id)
        if(map.hasLayer(newComment)){
            map.removeLayer(newComment)
        }
        newComment = L.marker([lat,lng]).bindPopup(lat.toFixed(4)+", "+lng.toFixed(4))
        newComment.addTo(map)
        $("#post_comment input[name='name']").focus()
    });
    $('div.rightClick#suggest').hover(function(){
        $('div.rightClick#suggest').toggleClass('highlight')
    });
    $('div.rightClick#suggest').mousedown(function(){
        newSuggestion.closePopup();
        map.removeLayer(dropdown);
        newSuggestion = L.circleMarker(e.latlng,suggestionOptions);
        newSuggestion.bindPopup("<form onchange='validate(this)' style='width:200px;height:185px;' accept-charset='UTF-8' action='/projects/suggest' data-remote='true' id='post_suggestion' method='post'><div style='margin:0;padding:0;display:inline'><input name='suggest' type='hidden' value='true'><input name='utf8' type='hidden' value='✓'><input name='[geometry]latitude' type='hidden' value='"+ e.latlng.lat+"'><input name='[geometry]longitude' type='hidden' value='"+ e.latlng.lng+"'><input name='filename' type='hidden'><input name='[base64_media_item]media_data' type='hidden'><input name='[base64_media_item]content_type' type='hidden'><input name='[base64_media_item]original_filename' type='hidden'></div><input type='text' class='post_suggestion' name='project[title]' required='true' placeholder='*Suggest a project title' style='float:left;width:100%;'><input class='post_suggestion' name='project[user_suggestion_email]' placeholder='*Email' required='true' type='text' style='float:left;width:100%'><input class='post_suggestion' name='project[sources_attributes][][url]' required='true' placeholder='*Source URL' type='text' style='float:left;width:100%;'><div style='height:36px;float:left;width:30%;line-height:36px;'><span style='font-weight:bold;vertical-align:middle;display:inline-block;line-height:1;'>Attach media:</span></div><input class='post_suggestion' name='media' id='suggestionmediaupload' type='file' accept='image/*,video/*' style='float:left;width:70%;'><input class='post_suggestion' style='float:left;width:10%;' type='checkbox' required='true' id='terms_and_conditions'><label style='float:left;width:90%;'>I accept the <a href='http://aiddata.org/disclaimer-and-license' target='_blank'>terms and conditions</a>.</label><button type='button' style='width:50%;float:left;' id='submit' disabled='disabled' onclick='submitSuggestion()'>Submit</button><button type='button' style='width:50%;float:left;' onclick='cancelSuggestion()'>Cancel</button></form>")
        newSuggestion.addTo(map)
        newSuggestion.once('popupclose',cancelSuggestion)
        newSuggestion.openPopup()
        //Event Listener for file change
        suggestionFiles = [];
        $("#post_suggestion input[type=file]").change(function(event) {
            suggestionFiles = [];
            $.each(event.target.files, function(index, file) {
                var reader = new FileReader();
                reader.onload = function(event) {
                    object = {};
                    object.filename = file.name;
                    object.size = file.size;
                    object.type = file.type;
                    object.data = event.target.result;
                    suggestionFiles.push(object);
                };
                reader.readAsDataURL(file);
            });
        });
        //Event listener for ajax success
        $('form#post_suggestion')
                .bind("ajax:beforeSend", toggleLoading)
                .bind("ajax:success", function(){toggleLoading();window.alert("Thank you for suggesting a project.\n\nYour project will appear on your map during your current session, but will not be visible to other users until it is approved by an AidData staff member.")})
                .bind("ajax:error", function(){toggleLoading();window.alert("Sorry, something went wrong. Please try again later.")})
    });
};
function openRightClickCluster(e){
    var clusterEvent = e;
    clusterEvent.latlng = map.mouseEventToLatLng(e.originalEvent)
    map.fireEvent('contextmenu', clusterEvent)
};
function cancelSuggestion(){
    if(map.hasLayer(newSuggestion)){newSuggestion.closePopup();map.removeLayer(newSuggestion);}
};
function submitSuggestion(){
    var uploadSuccess = true;
    $.each(suggestionFiles, function(index, file) {
        if(file.size<10000000 && (file.type.substr(0,5)=="image" || file.type.substr(0,5)=="video")){
            $("#post_suggestion input[type = 'file']").val("")
            $("#post_suggestion input[name = '[base64_media_item]content_type']").val(file.type)
            $("#post_suggestion input[name = '[base64_media_item]original_filename']").val(file.filename)
            $("#post_suggestion input[name = '[base64_media_item]media_data']").val(file.data)
        }else{
            window.alert("Please limit your upload to 10MB and one of the following file types:\n\nImages: .png, .gif, .jpeg, or .jpg\n\nVideos: .avi, .mpeg, .mp4, quicktime, or .webm");
            uploadSuccess = false;
            suggestionFiles = [];
        }
    });
    var emailRegex = "[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+\.[a-zA-Z]{2,4}",
            email = $("form#post_suggestion input[name='project[user_suggestion_email]']").val(),
            URLRegex = "^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$",
            source =  $("form#post_suggestion input[name ='project[sources_attributes][][url]']").val();
    if(email.match(emailRegex)===null){
        uploadSuccess = false;
        window.alert("Please enter a valid email address.")
    }
    if(source.match(URLRegex)===null){
        uploadSuccess = false;
        window.alert("Please enter a valid source URL.")
    }
    if(uploadSuccess){
        $("form#post_suggestion").trigger("submit")
        var title=$("form#post_suggestion input[name ='project[title]']").val(),
                source = $("form#post_suggestion input[name ='project[sources_attributes][][url]']").val(),
                media = suggestionFiles[0];
        if(source.indexOf("http")==0){source = "<a href='"+source+"' target='_blank'>Link</a>"
        }else{source = "<a href='http://"+source+"' target='_blank'>Link</a>"}
        newSuggestion.closePopup()
        if(media==undefined){
            newSuggestion.bindPopup("<b>"+title+"</b><br>Source: "+source)
        }else if(media.type.substr(0,5)=="video"){
            if(media.type=="video/mp4"){
                var video = "<video width='280' height='210' controls><source type='"+media.type+"' src='"+media.data+"'></video>";
            }else if(media.type=="video/webm"){
                var video = "<video width='280' height='210' controls><source type='"+media.type+"' src='"+media.data+"'></video>";
            }else if(window.navigator.userAgent.indexOf("Mobile")==-1) {
                var video = "<a href='"+media.data+"'>Download video.</a>";
            }else{
                var video = "<b>Videos are disabled on mobile platforms. Please revisit this suggested project on a desktop computer to view the attached media.</b>";
            };
            newSuggestion.bindPopup("<b>"+title+"</b><br>"+video+"<br>Source: "+source)
        }else if(media.type.substr(0,5)=="image"){
            newSuggestion.bindPopup("<b>"+title+"</b><br><img class='constrained' src='"+media.data+"' style='cursor:pointer;max-width:100%;max-height:100%;' onclick='enlarge(this)'/><br>Source: "+source)
        }else{
            newSuggestion.bindPopup("<b>"+title+"</b><br>Source: "+source)
        }
        suggestions.addLayer(newSuggestion)
        if(map.hasLayer(newSuggestion)){map.removeLayer(newSuggestion)}
        if(map.hasLayer(suggestions)){map.removeLayer(suggestions)}
        suggestions.addTo(map)
        newSuggestion = L.marker()
        suggestionFiles = [];
        validate($("form#post_suggestion"))
    };
};
function enlarge(image){
    $(image).toggleClass("big")
}
function submitComment(){
    var uploadSuccess = true;
    $.each(commentFiles, function(index, file) {
        if(file.size<10000000 && (file.type.substr(0,5)=="image" || file.type.substr(0,5)=="video")){
            $("#post_comment input[type = 'file']").val("")
            $("#post_comment input[name = '[base64_media_item]content_type']").val(file.type)
            $("#post_comment input[name = '[base64_media_item]original_filename']").val(file.filename)
            $("#post_comment input[name = '[base64_media_item]media_data']").val(file.data)
        }else{
            window.alert("Please limit your upload to 10MB and one of the following file types:\n\nImages: .png, .gif, .jpeg, or .jpg\n\nVideos: .avi, .mpeg, .mp4, quicktime, or .webm");
            uploadSuccess = false;
            commentFiles = [];
        }
    });
    var emailRegex = "[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+\.[a-zA-Z]{2,4}",
            email = $("form#post_comment input[name='[comment]email']").val();
    if(email.match(emailRegex)===null){
        uploadSuccess = false;
        window.alert("Please enter a valid email address.")
    }
    if(uploadSuccess){
        $("#post_comment input[name = 'latlng']").val("")
        $("form#post_comment").trigger("submit")
        var content=$("form#post_comment textarea[name ='comment[content]']").val(),
                name = $("form#post_comment input[name ='[comment]name']").val(),
                project_id = $("form#post_comment input[name ='[comment]project_id']").val(),
                latlng = $("form#post_comment input[name ='latlng']").val().split(','),
                media = commentFiles[0];
        if(map.hasLayer(newComment)) {
            newComment.closePopup()
            if(media==undefined){
                newComment.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br>-" + name)
            }else if(media.type.substr(0,5)=="video"){
                if(media.type=="video/mp4"){
                    var video = "<video width='280' height='210' controls><source type='"+media.type+"' src='"+media.data+"'></video>";
                }else if(media.type=="video/webm"){
                    var video = "<video width='280' height='210' controls><source type='"+media.type+"' src='"+media.data+"'></video>";
                }else if(window.navigator.userAgent.indexOf("Mobile")==-1) {
                    var video = "<a href='"+media.data+"'>Download video.</a>";
                }else{
                    var video = "<b>Videos are disabled on mobile platforms. Please revisit this comment on a desktop computer to view the attached media.</b>";
                };
                newComment.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br>"+video+"<br>-" + name)
            }else if(media.type.substr(0,5)=="image"){
                newComment.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br><img class='constrained' src='"+media.data+"' style='cursor:pointer;max-width:100%;max-height:100%;' onclick='enlarge(this)'/><br>-" + name)
            }else{
                newComment.bindPopup("<b>Comment on Project ID: <a href='/projects/"+project_id+"' target='_blank'>"+project_id+"</a></b><br>"+content + "<br>-" + name)
            }
            comments.addLayer(newComment)
            if (map.hasLayer(newComment)) {
                map.removeLayer(newComment)
            }
            if (map.hasLayer(comments)) {
                map.removeLayer(comments)
            }
            comments.addTo(map)
            newComment = L.marker()
            $("input#commentOverlay").prop('checked', true)
        }
        $("form#post_comment input:not([name='[comment]project_id']):not([name='definitely_came_from_web_form']):not([name='utf8'])").val("")
        $("form#post_comment textarea").val("")
        $("form#post_comment input[type='checkbox']").prop("checked", false)
        commentFiles = [];
        validate($("form#post_comment"))
    };
};
map.on('zoomend',setRadiusByZoom)

$(document).ready(function(){
    //Initialize autocomplete
    $( "#search" ).autocomplete({
        source: get_keywords,
        minLength: 1
    });
    //If query, set zoom and fill in search bar
    $('#search').val(results.query)
    if(getParams().q!=undefined){
        if(results.bounds!=undefined && feature_collection.features.length>0){
            map.fitBounds(results.bounds)
        }else if(results.bounds!=undefined && feature_collection.features.length<=0){
            map.fitBounds(results.bounds)
            $('#resultcount').html("<strong style='line-height:28px;'>No search results.</strong><hr>")
        }else if(feature_collection.features.length>0){
            var bounds = markers.getBounds()
            zoomToFeature(bounds)
        }else{
            map.fitBounds([[52,68],[-42,-29]])
            $('#resultcount').html("<strong style='line-height:28px;'>No search results.</strong><hr>")
        }
    }
});
</script>
