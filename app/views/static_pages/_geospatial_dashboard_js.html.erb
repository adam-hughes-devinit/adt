<meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' />
<%= javascript_include_tag   "humanity_united/mapbox" %>
<%= javascript_include_tag   "humanity_united/jquery-ui-1.10.4.custom.min" %>
<%= stylesheet_link_tag "humanity_united/mapbox" %>
<%= stylesheet_link_tag "humanity_united/ui-lightness/jquery-ui-1.10.4.custom.min" %>
<style>
    .container {width:100% !important;padding:0px !important;}
    #vis { width:100%; height:100%; margin-right:auto; margin-left:auto;}
    #map { position:absolute; height:100%; width:100%; margin-right:auto;margin-left:auto; }
    #searchbar {width:40%;position:absolute;left:10px;opacity:0.9;padding-left:2px;}
    #searchbar .vissearch {width:100%;margin-bottom:0px !important;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:0px;}
    #searchbar form {position:relative; right:10px; margin-bottom: 1px;}
    #left {float:left;width:18%}
    #searchresults {float:left;position:relative;top:35px;height:auto;width:100%;padding:1px;overflow-y:scroll;background-color:#FFF;opacity:0.9;max-height:600px;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px; left:2px;}
    #filtercontrol ol, #filtercontrol ul {margin:0 0 10px 10px;}
    #filtercontrol {float:right;position:relative;right:2px;top:3px;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;height:auto;width:18%;padding:1px;background-color:#FFF;opacity:0.9;overflow-y:scroll;max-height:600px;}
    h4 {margin-left:5px;}
    #searchresults #hoverInfo{margin:0 0 10px 10px;}
    #searchresults #results{margin:0 10px 10px 10px;}
    form.leaflet-control-layers-list{margin:0px !important;}
    .info {padding: 6px 8px;background: rgba(255,255,255,0.9);box-shadow: 0 0 15px rgba(0,0,0,0.2);}
    .info h4 {margin: 0 0 5px;color: #777;}
    .legend {text-align: left;line-height: 18px;color: #555;}
    .legend i {width: 18px;height: 18px;float: left; margin-right: 8px;opacity: 0.7;}
    .leaflet-disabled{background-color:lightgrey;}
    .ui-widget{z-index:9997 !important;}
    img.loading{z-index:9999;display:none;position:absolute;top:50%;right:50%;}
    div.loading{z-index:9998;display:none;background-color:grey;position:absolute;opacity:0.4;height:100%;width:100%;overflow:hidden;}
    div.leaflet-control-zoom {left:0px !important;top:25px !important;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:0px;}
    div.leaflet-left {margin-left:18% !important}
    div.leaflet-control-layers {right:3px !important;top:1px !important;margin-top:2px !important;margin-right:18%;opacity:0.9;box-shadow:0 0 15px rgba(0,0,0,0.2);border: solid rgba(0,0,0,0.2) 1px;border-radius:0px;}
    div.leaflet-right.leaflet-top {margin-right:18% !important}
    #watermark{position:absolute;bottom:0px;left:0px;}
</style>
<div class="loading"></div>
<div id="vis">
  <img class="loading" src='/assets/humanity_united/loading.gif' alt='loading'>
    <div id="searchbar" class="ui-widget">
      <%= form_tag "/queries/geospatial_search", id: "geospatial_search", method: :get, remote: true do %>
            <%= text_field_tag :search, params[:search], placeholder: 'Search for projects and locations by keyword...', class:'vissearch' %>
      <% end %>
    </div>
  <script>
    var toggleLoading = function(){$(".loading").toggle();$( "#search" ).autocomplete("close");};
      $('#geospatial_search')
              .bind("ajax:beforeSend", toggleLoading)
              .bind("ajax:complete", toggleLoading)
              .bind("ajax:success",function(xhr,data,status){
              feature_collection = data
              geoJson.clearLayers()
              geoJson.addData(feature_collection.features)
              if(feature_collection.features.length>0){
                  if(Object.keys(geoJson._layers).length>0){
                      var bounds = geoJson.getBounds()
                      zoomToFeature(bounds)
                  }
                  $('#results').html("<strong>"+feature_collection.features.length+" geocodes:</strong>")
                  $('#hoverInfo').html("")
              }
                  else{
                  map.fitBounds([[52,68],[-42,-29]])
                  $('#results').html("<strong>No search results.</strong>")
                  $('#hoverInfo').html("")
              }
              })
      $(document).ready(function(){
          $( "#search" ).autocomplete({
              source: get_keywords,
              minLength: 1
          });
      });
      function get_keywords(request, response){
          var params = {keywords: request.term.split(/(?:\(.*?\))+/)[0]};
          $.get("/queries/json_completion", params, function(data){
              response(data); }, "json");
      }
  </script>
    <div id='map'>
    </div>
    <div id="left">
      <div id="searchresults">
        <h4>Results</h4>
        <div id="results"></div>
        <div id="hoverInfo"></div>
      </div>
    </div>
  <div id="filtercontrol">
    <h4>Filter</h4>
    <div id="project-facets">
      <div class="pull-left">
        <ol>
          <div class="search-facet">
            <b class="facet-header">
              <a href="#" onclick="$(this).parent().siblings('ul').slideToggle(); $(this).parent().siblings('.facet-controller').slideToggle(); return false;">Year</a>
            </b>
            <span class="check_count project_year"></span>
            <a class="facet-controller" id="project_years_on" href="#" onclick="$(this).siblings('ul').find('input').prop('checked', 'true');update_check_counter_for('project_year'); return false;" style="display: none;">Select all</a>
            <a class="facet-controller" id="project_years_off" href="#" onclick="$(this).siblings('ul').find('input').prop('checked', false);update_check_counter_for('project_year'); return false;" style="display: none;">Unselect all</a>
            <ul id="yearfilter" class="unstyled facet-list" style="display: none;"></ul>
            <script>
                //Update check-box count
                function update_check_counter_for(this_facet) {
                    checked_boxes = $(".search_check."+this_facet+":checked")
                    check_count = checked_boxes.length
                    counter = $('.check_count.'+this_facet)
                    counter_text = check_count > 0 ? "("+check_count+")" : ""
                    counter.text(counter_text)

                }
                //Draw checkboxes for year
                var project_years = ["2012","2011","2010","2009","2008","2007","2006","2005","2004","2003","2002","2001","2000"]
                for(var i=0;i<13;i++){
                    $('ul#yearfilter').append("<li class='facet-list-item'><label class='checkbox'><input type='checkbox' checked='true' name='project_year' value='"+(2012-i)+"' class='search_check boolean project_year'>"+(2012-i)+"</label></li>")
                }
                update_check_counter_for('project_year')
                $('.facet-list-item').click(function() {
                    this_facet = $(this).find('.search_check').attr("name").replace(/\[\]/g, '')
                    update_check_counter_for(this_facet)
                })
            </script>
          </div>
        </ol>
      </div>
    </div>
  </div>
  <div id="watermark">
    <a href="/"><%= image_tag("open_adt_small.png", width: "300") %></a>
  </div>
</div>
<%= javascript_tag "var feature_collection=#{@feature_collection.to_json}"%>
<script>
//Set-up layers
    function getAdm(level,code){
        var layer = L.tileLayer('http://china-tilestache.aiddata.org/{shp}/{z}/{x}/{y}.png', {
            shp: 'adm'+level+'_'+code,
            noWrap:true,
            opacity:0.7
        });
        if(level!==undefined && code!==undefined && level!="0") {
            return layer;
        }
        else{
            return L.geoJson();
        }
    }
    var MapQuest = L.tileLayer('http://otile{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.jpeg', {
                attribution: 'Tiles by <a href="http://www.mapquest.com/">MapQuest</a> &mdash; Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
                subdomains: '1234',
                noWrap:true
            }),
            none = L.geoJson(),
            poverty = L.mapbox.tileLayer('miranda-lv.di996bt9', {
                noWrap:true,
                opacity:0.7
            }),
//sudo ./scripts/tilestache-server.py -c adm.cfg
//sudo python ./scripts/tilestache-seed.py -c dashboard.cfg -b -42 -29 52 68 -l usgs 0 1 2 3 4 5 6 7 8 9 10 11 12 13
//sudo python ./scripts/tilestache-seed.py -c dashboard.cfg -b -42 -29 52 68 -l acled 0 1 2 3 4 5 6 7 8 9 10 11 12 13
        acled = L.tileLayer('http://china-tilestache.aiddata.org/acled/{z}/{x}/{y}.png', {
                attribution: "Base layer data from <a href='http://www.acleddata.com/'>ACLED</a>",
                noWrap:true,
                opacity:0.7
            }),
            usgs = L.tileLayer('http://china-tilestache.aiddata.org/usgs/{z}/{x}/{y}.png',{
                attribution: "Base layer data from <a href='http://tin.er.usgs.gov/mrds/'>USGS MRDS</a>",
                noWrap:true
            }),
//Set-up map
            map = L.map('map', {
                maxBounds: [[180,180],[-180,-180]],
                center: [6.964039, 19.533678],
                zoom:3,
                minZoom:3,
                maxZoom:13,
                layers:MapQuest
            }),
            baseMaps ={
                "None": none,
                "Poverty": poverty,
                "Armed Conflict": acled,
                "Minerals and Mines": usgs
            },
//Set-up GeoJson
            MarkerOptions = {
            radius: 4,
            fillColor: "#9FE5F8",
            color: "#000",
            weight: 1,
            opacity: 1,
            fillOpacity: 0.5};
//Set-up Leaflet Controls
    map.addLayer(none);
    var layerControl = L.control.layers(baseMaps);
    layerControl.options.collapsed = false;
    layerControl.addTo(map);
    layerControl.collapse = function(){
        layerControl.removeFrom(map);
        layerControl.options.collapsed = true;
        layerControl.addTo(map);
    }
function fullExtent(event){
    event.preventDefault();
    map.fitBounds([[52,68],[-42,-29]])
    return false;
}
$('.leaflet-control-zoom').prepend("<a href='#' style='font-weight:bold;text-align:center;' onclick='fullExtent(event)'><span style='position:relative;top:3px;'>Full</span></a>");
    $('.leaflet-control-layers-base').prepend("<span style='float:right;cursor:pointer;' onClick='layerControl.collapse()'><strong>X</strong></span>")
    function getColorPoverty(d) {
        return d > 79.9  ? '#FF0202' :
                        d > 59.9   ? '#FA5A5A' :
                        d > 39.9   ? '#F78282' :
                        d > 19.9   ? '#F5AAAA' :
                '#F6CECE';
    }
    function getColorConflict(d) {
        return d == "High"  ? '#BD0228' :
                        d == "Medium"   ? '#F4582B' :
                        d == "Low"   ? '#FDB853' :
                '#FFFFB3';
    }
    var legend = L.control({position: 'bottomright'});
//GeoJson Functions
function highlightFeature(e) {
    var layer = e.target,
        feature = layer.feature;
    layer.setStyle({
        weight: 3
    });
    if(feature.properties && feature.properties.project_id && feature.properties.project_year && feature.properties.geo_name && feature.properties.precision_code){
        $('div#hoverInfo').html("<strong>Project ID: </strong>"+ feature.properties.project_id + "<br/><strong>Year: </strong>" + feature.properties.project_year + "<br/><strong>Location: </strong>" + feature.properties.geo_name + "<br/><strong>Precision: </strong>" + feature.properties.precision_code);
    }
}
function resetHighlight(e) {
    var layer = e.target;
    layer.setStyle({
        weight: 1
    });
}
function highlightProject(e) {
//Change style and count geocodes with same project
    geoJson.setStyle(MarkerOptions)
    var project = e.target.feature.properties.project_id,
        projectCount = 0;
    geoJson.setStyle(function(feature){
        var thisProject = feature.properties.project_id;
        projectCount+=thisProject==project?1:0
        switch (thisProject){
            case project: return {
                fillColor:"#f8a39f",
                radius:8
            };
        }
    });
//Establish subset for bounds and adm gathering
    geoJsonSubset.clearLayers();
    geoJsonSubset.options.filter = function(feature,layer){
        return feature.properties.project_id==project
    }
    geoJsonSubset.addData(feature_collection.features);
    if(Object.keys(geoJsonSubset._layers).length>0){
        var bounds = geoJsonSubset.getBounds()
        zoomToFeature(bounds)
    }
    $('div#hoverInfo').append("<br/><strong>Common geocodes: </strong>"+projectCount)
    var highlightedAdms = [],
            duplicateAdms = {},
            uniqueAdms = [];
    for(var layer in geoJsonSubset._layers){
        var layer_level = geoJsonSubset._layers[layer].feature.properties.adm_level
                layer_code = geoJsonSubset._layers[layer].feature.properties.adm_code,
                layer_precision = geoJsonSubset._layers[layer].feature.properties.precision_code,
                adm_level = typeof(layer_level)=="number"&&layer_precision>1?layer_level:undefined,
                adm_code = typeof(layer_code)=="number"&&layer_precision>1?layer_code:undefined;
        highlightedAdms.push(getAdm(adm_level,adm_code))
    }
    $.each(highlightedAdms, function(i, el) {
        if (!duplicateAdms[el.options.shp]) {
            duplicateAdms[el.options.shp] = true;
            uniqueAdms.push(el);
        }
    });
    if(typeof(adms)=="object"){map.removeLayer(adms)}
    adms = L.featureGroup(uniqueAdms);
    //adms.addTo(map);
};
function zoomToFeature(bounds){
    if (bounds.getNorthEast().equals(bounds.getSouthWest())) {
        var extendPoint1 = new L.LatLng(bounds.getNorthEast().lat + 0.01, bounds.getNorthEast().lng + 0.01);
        var extendPoint2 = new L.LatLng(bounds.getNorthEast().lat - 0.01, bounds.getNorthEast().lng - 0.01);
        bounds.extend(extendPoint1);
        bounds.extend(extendPoint2);
    }
    map.fitBounds(bounds,{maxZoom:9});
};
function onEachFeature(feature,layer){
        layer.on({
            mouseover:highlightFeature,
            mouseout:resetHighlight,
            click: highlightProject
        })
    }
if (feature_collection === null){
    console.log("Feature collection error.")
    feature_collection = {};
    feature_collection.features=[];}
var geoJson = L.geoJson(feature_collection.features, {
    onEachFeature: onEachFeature,
    pointToLayer: function (feature, latlng) {
        return L.circleMarker(latlng, MarkerOptions);
    }
}),
    geoJsonSubset = L.geoJson(feature_collection.features, {
        onEachFeature: onEachFeature,
        pointToLayer: function (feature, latlng) {
            return L.circleMarker(latlng, MarkerOptions);
        }
    });
map.addLayer(geoJson);
//Filter function
function filterGeoJson(filterObject){
    if(filterObject===undefined){
        geoJson.options.filter = undefined;
    }
    else{
        geoJson.options.filter = function(feature,layer){
            var metaFilterBoolean = true;
            for(var filter in filterObject){
                var values = filterObject[filter],
                        valueLen = values.length,
                        filterBoolean = false;
                for(var i=0;i<valueLen;i++){
                    filterBoolean = filterBoolean || feature.properties[filter] == values[i]
                };
                metaFilterBoolean = metaFilterBoolean && filterBoolean
            };
            return metaFilterBoolean;
        };
    }
    geoJson.clearLayers()
    geoJson.addData(feature_collection.features)
};
var filterObject = {"project_year":project_years};
//This can be changed to [type='checkbox'] when both fields are active
$("input[name='project_year']").change(function(){
   var changedBox = this,
           attribute = $(changedBox).attr("name"),
           value = $(changedBox).attr("value"),
           onOff = $("input:checked[name="+attribute+"][value="+value+"]").length,
           index = filterObject[attribute].indexOf(value);
    if(onOff==1){
        if(index==-1){
            filterObject[attribute].push(value);
        }
    }
    else{
        if(index>-1){
            filterObject[attribute].splice(index,1);
        }
    }
    filterGeoJson(filterObject);
});
$("a.facet-controller#project_years_on").click(function(){
    var project_years = ["2012","2011","2010","2009","2008","2007","2006","2005","2004","2003","2002","2001","2000"]
    filterObject.project_year = project_years;
    filterGeoJson(filterObject);
});
$("a.facet-controller#project_years_off").click(function(){
    filterObject.project_year = [];
    filterGeoJson(filterObject);
});
//Legend show/hide and div height control
$(document).ready(function(){
    map.on("baselayerchange", function(layer){
        var selected_layer = layer;
        if(selected_layer.name=="None"){
            console.log("Selected layer: None")
            if (legend._map!=null){
                map.removeControl(legend);
            }
        }
        if(selected_layer.name=="Poverty"){
            console.log("Selected layer: Poverty")
            legend.onAdd = function (map) {
                var div = L.DomUtil.create('div', 'info legend'),
                        grades = [0, 20, 40, 60, 80],
                        labels = [],
                        from, to;
                for (var i = 0; i < grades.length; i++) {
                    from = grades[i];
                    to = grades[i + 1];
                    labels.push(
                                    '<i style="background:' + getColorPoverty(from) + '"></i> ' +
                                    from + (to ? '&ndash;' + to + '%' : '%+'));
                }
                div.innerHTML = labels.join('<br>');
                return div;
            };
            if (legend._map!=null){
                map.removeControl(legend);
            }
            map.addControl(legend);
        }
        if(selected_layer.name=="Armed Conflict"){
            console.log("Selected layer: Armed Conflict")
            legend.onAdd = function(map){
                var div = L.DomUtil.create('div', 'info legend'),
                        grades = ["None", "Low", "Medium", "High"],
                        labels = [],
                        from, to;
                for (var i = 0; i < grades.length; i++) {
                    from = grades[i];
                    to = grades[i + 1];
                    labels.push(
                                    '<i style="background:' + getColorConflict(from) + '"></i> ' +
                                    from + (to ? '&ndash;' + to : '+'));
                }
                div.innerHTML = labels.join('<br>');
                return div;
            }
            if (legend._map!=null){
                map.removeControl(legend);
            }
            map.addControl(legend);
        }
        if(selected_layer.name=="Minerals and Mines"){
            console.log("Selected layer: Minerals and Mines")
            legend.onAdd = function(map){
                var div = L.DomUtil.create('div', 'info legend')
                        labels = [];
                labels.push('<i style="background:#A10202"></i>' + "Mine, past or present");
                labels.push('<i style="background:#ffffff;border:solid #02A102 2px;"></i>' + "Prospective mine");
                labels.push('<i style="background:#0202A1"></i>' + "Processing plant");
                labels.push('<i style="background:#ffffff;border:solid black 2px;"></i>' + "Unknown");
                div.innerHTML = labels.join('<br>');
                return div;
            }
            if (legend._map!=null){
                map.removeControl(legend);
            }
            map.addControl(legend);
        }
    })
})
</script>